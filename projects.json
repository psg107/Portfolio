[
  {
    "name": "패키지 예약 시뮬레이팅",
    "description": {
      "summary": "기존 수동 엑셀 계산으로 진행되던 패키지 상품 수익성 분석을 자동화하여 실시간 의사결정을 지원하는 시스템을 구축했습니다. 다양한 시나리오를 빠르게 비교 분석할 수 있어 가격 책정과 출발 확정 판단이 수월해졌습니다.",
      "highlights": [
        "Redis 캐시를 활용한 반복 계산 성능 최적화",
        "동일 출발일 예약 데이터 통합 분석 및 마진 자동 계산",
        "임의 예약 추가/가격 조정에 따른 수익 변동 시뮬레이션 기능",
        "출발 확정/취소 자동 판단 로직 구현",
        "다양한 시나리오 비교 분석 기능"
      ]
    },
    "from": "2025.05",
    "to": "2025.05",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "RestAPI",
      "TypeScript",
      "React",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 홈쇼핑 관리",
    "description": {
      "summary": "홈쇼핑 채널 전용 여행 상품 관리 및 예약 시스템을 구축했습니다. 고객 명단 등록부터 알림톡 발송, 재고 선점을 통한 예약 처리까지 홈쇼핑 특화 프로세스를 지원하여 고객 응대 품질을 향상시켰습니다.",
      "highlights": [
        "Amazon SQS 비동기 처리를 통한 알림톡 발송 자동화",
        "MongoDB 기반 재고 선점으로 동시 예약 처리",
        "카카오 알림톡 API 연동을 통한 고객 안내 자동화",
        "홈쇼핑 방송 관리 및 고객명단 일괄 등록 기능",
        "비회원 인증 기반 간편 예약 프로세스",
        "홈쇼핑 전용 가격/특전 정책 관리 시스템"
      ]
    },
    "from": "2025.03",
    "to": "2025.04",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "RestAPI",
      "TypeScript",
      "React",
      "Kakao API",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 공급사 연동 서비스",
    "description": {
      "summary": "구패키지 시스템에서 신패키지 시스템으로 전환하면서 외부 공급사(모두투어)와의 실시간 상품 연동을 새롭게 구축한 마이크로서비스입니다. 대용량 상품 데이터(일 평균 기초상품 15,458개, 출발상품 314만개)의 자동 수집/처리와 실시간 변경사항 추적을 통해 운영 효율성을 크게 향상시켰습니다.",
      "challenges": [
        "하루 평균 314만개에 달하는 대용량 여행 상품 데이터를 실시간으로 수집하고 동기화해야 하는 성능상의 한계가 있었습니다. 특히 외부 공급사에서 실시간 변경 이벤트나 Webhook을 제공하지 않고 DB 직접 접근도 불가능한 상황에서 상품 변경을 감지하는 효율적인 방법을 찾아야 했습니다",
        "모두투어와 자사 시스템 간 상품 정보 구조가 달라 데이터 변환 과정에서 정보 손실 없이 정확하게 매핑하는 것이 어려웠습니다. 특히 항공편 정보, 취소 규정, 가격 정책 등 복잡한 여행 상품 속성들을 표준화된 형태로 변환해야 했습니다",
        "314만개 상품을 지속적으로 폴링하는 것은 시스템 리소스와 외부 API 호출 비용 측면에서 비현실적이므로, 고객 요청 기반의 효율적인 동기화 전략이 필요했습니다",
        "실시간 고객 조회와 백그라운드 동기화 작업이 동시에 실행될 때 같은 상품에 대한 중복 처리를 방지하고 데이터 일관성을 보장해야 했습니다"
      ],
      "solutions": [
        "외부 공급사의 제약사항(변경 이벤트 미제공, DB 접근 불가)을 고려하여 고객 요청 기반 동기화 전략을 설계했습니다. 멀티스레드 병렬 처리로 새벽 배치 시간을 대폭 단축하고, 고객 요청 시에만 선택적으로 실시간 동기화를 수행하여 시스템 효율성을 극대화했습니다",
        "표준화된 데이터 변환 계층을 설계하여 모두투어의 복잡한 상품 정보를 자사 시스템에 맞는 형태로 안전하게 변환했습니다. 항공편명이나 가격 변경 시 기존 상품을 자동으로 마감 처리하고 새로운 상품으로 교체하는 자동화 로직을 구현했습니다",
        "대용량 폴링의 비효율성을 해결하기 위해 3단계 검증 시스템을 구축했습니다. 새벽 배치 → 고객 탐색 시 백그라운드 동기화 → 예약 시점 완전 실시간 검증으로 API 호출을 최소화하면서도 데이터 정확성을 보장했습니다",
        "분산 락 메커니즘과 이벤트 기반 아키텍처를 도입하여 동일 상품에 대한 동시 처리를 방지했습니다. 고객 요청 시 가벼운 정보로 상품 변경 여부를 판단한 후 백그라운드에서 동기화 작업을 수행하도록 하여 응답 성능과 데이터 정확성을 모두 확보했습니다"
      ],
      "technical_details": [
        "외부 공급사의 시스템 제약사항(실시간 변경 이벤트 미제공, DB 직접 접근 불가, Webhook 미지원)으로 인해 314만개 상품을 지속적으로 폴링하는 것이 불가능한 상황에서, 매일 새벽 1차 배치로 전체 상품 정보를 동기화하는 현실적인 해결책을 도출했습니다",
        "고객의 실시간 요청 시 가벼운 메타데이터로 상품 변경 여부를 빠르게 판단하여 필요한 경우에만 백그라운드에서 상세 동기화를 수행하는 효율적인 2단계 동기화 시스템을 구현했습니다",
        "고객 탐색 시에는 백그라운드 동기화로 최대한 실시간에 가까운 정보를 제공하고, 실제 예약 시점에는 완전 실시간 체크를 통해 수집된 정보와 최신 정보를 비교하여 변경 사항이 있으면 고객에게 안내 후 즉시 동기화하는 3단계 검증 시스템을 구축했습니다",
        "외부 공급사의 정적 데이터와 실시간 데이터를 조합하여 상품 기본 정보부터 일정, 가격까지 종합적인 상품 정보를 자동으로 수집하고 저장하는 하이브리드 수집 방식을 적용했습니다",
        "상품 변경 사항을 자동으로 감지하여 기존 상품을 적절히 마감 처리하고 새로운 버전의 상품으로 교체하는 버전 관리 시스템을 구축했습니다",
        "분산 락을 통해 동일 상품에 대한 중복 동기화를 방지하고, 실시간 재고 및 가격 조회 API를 제공하면서도 캐시 시스템으로 성능을 최적화했습니다",
        "예약 생성 및 조회 API를 연동하고, 내부 상품 시스템과 표준화된 형태로 데이터를 동기화하는 통합 인터페이스를 구축했습니다",
        "수집 로그를 체계적으로 저장하고 실시간 알림 시스템으로 배치 상태를 모니터링하며, 완료 이벤트를 발행하여 다른 시스템과 연동되도록 구성했습니다"
      ],
      "performance_results": [
        "일 평균 15,458개의 기초상품과 314만개의 출발상품을 완전 자동화하여 신패키지 시스템에서의 공급사 연동을 성공적으로 구축했습니다",
        "병렬 처리 기술 도입으로 대용량 배치 수집 시간을 대폭 단축하여 업무 효율성을 크게 향상시켰습니다",
        "캐시 시스템과 장애 대응 메커니즘으로 외부 시스템 의존성을 최소화하여 99% 이상의 높은 시스템 안정성을 확보했습니다",
        "고객 요청 기반 동기화 시스템으로 해당 상품에 접근하는 고객이 있을 때만 실시간 변경사항을 감지하고 반영하여 상품 정보의 신선도를 향상시켰습니다"
      ]
    },
    "from": "2024.10",
    "to": "2024.11",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "AWS Scheduled Task",
      "Amazon SQS",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 통합 검색/전시 서비스",
    "images": ["1.png", "2.png"],
    "description": {
      "summary": "구패키지(C# 기반)와 신규패키지(Kotlin 기반) 시스템을 동시 운영하면서 양쪽 상품을 통합 검색할 수 있는 허브 서비스를 새롭게 개발했습니다. 20,000개 상품과 2년치 일자별 데이터를 실시간으로 검색/필터링하는 고성능 시스템을 구축했습니다.",
      "challenges": [
        "기존 C# 기반 시스템과 신규 Kotlin 시스템의 API 응답 구조가 완전히 달라서, 단순 병합으로는 정렬과 필터링이 불가능했습니다. 각 시스템당 평균 500ms 응답시간으로 순차 호출 시 1초 이상 걸리는 성능 문제가 있었습니다",
        "사내 검색엔진(Andor)의 2단계 검색 구조로 인한 성능 병목이 심각했습니다. 1차 필터링에서 최대 10,000개 상품이 반환되고, 2차에서 각 상품별로 MongoDB 조회와 외부 시스템 통신을 통한 다이나믹 데이터 주입 과정에서 검색 조건에 따라 1초~8초까지 응답시간이 크게 차이났습니다",
        "검색 요청이 급증하는 시간대에 외부 시스템 중 하나라도 장애가 나면 전체 검색 서비스가 먹통이 되는 단일 장애점 문제가 있었습니다",
        "검색엔진의 텍스트 매칭 점수와 비즈니스 로직의 상품 추천 점수를 어떻게 조합해서 사용자에게 최적의 검색 결과를 보여줄지에 대한 알고리즘 설계가 필요했습니다"
      ],
      "solutions": [
        "어댑터 패턴을 적용해 C#과 Kotlin 시스템의 서로 다른 API 응답을 하나의 통일된 인터페이스로 추상화했습니다. Kotlin Coroutine으로 두 시스템을 병렬 호출하여 응답시간을 절반으로 단축했습니다",
        "상품 색인 시 2년치 날짜 범위에서 최저가 날짜 정보를 '대표출발일' 스태틱 필드로 미리 저장하여, 다이나믹 필드 없는 검색 시 2차 데이터 주입 과정을 완전히 생략할 수 있도록 최적화했습니다",
        "팩토리 패턴과 전략 패턴으로 플랫폼별(Package/WorldIn) 검색 로직을 모듈화하여, 새로운 시스템 추가 시에도 기존 코드 변경 없이 확장 가능하도록 설계했습니다",
        "Circuit Breaker 패턴을 도입하여 외부 시스템 장애 시 해당 시스템만 격리하고 나머지 시스템으로라도 서비스를 지속할 수 있도록 안정성을 확보했습니다",
        "MongoDB 집계 파이프라인으로 상품별 추천 점수를 실시간 계산하고, Redis 다층 캐시 전략으로 인기 검색어와 필터 조건을 미리 계산해서 반복 검색 성능을 극대화했습니다"
      ],
      "technical_details": [
        "사내 검색엔진(Andor)의 스태틱/다이나믹 필드 구조를 활용한 3단계 검색 흐름을 설계했습니다: ①스태틱 필드로 1차 필터링하여 상품코드와 검색키 반환 ②상품별 다이나믹 데이터 주입으로 2차 필터링 ③검색키로 최종 결과 조회",
        "검색 조건을 분석하여 스태틱 필드만으로 검색 가능한 경우 2차 다이나믹 데이터 주입 단계를 생략하는 최적화 로직을 구현했습니다. 이를 위해 '대표출발일' 필드에 2년치 최저가 날짜 정보를 미리 색인했습니다",
        "최대 10,000개 상품에 대한 다이나믹 데이터 주입 시 MongoDB 집계 파이프라인과 외부 시스템 병렬 호출로 처리 시간을 최소화했습니다",
        "Ktor HTTP Client의 비동기 통신으로 동시 검색 요청을 처리하되, 각 외부 시스템별로 독립적인 타임아웃과 재시도 로직을 적용했습니다",
        "도메인별 패키지를 분리(product, cache, search, bridge)하고 계층별 책임을 명확히 분리하여, 테스트 코드 작성과 유지보수가 용이하도록 설계했습니다"
      ],
      "performance_results": [
        "Redis 캐시를 통한 인기 검색어와 필터 조건 사전 계산으로 반복 검색 시 응답시간을 최대 8초에서 1초 이내로 대폭 단축했습니다",
        "'대표출발일' 스태틱 필드 최적화로 다이나믹 조건 없는 검색 시 10,000개 상품도 1초 이내에 결과 반환이 가능해졌습니다",
        "비동기 병렬 처리와 다이나믹 데이터 주입 최적화로 동시 검색 요청 처리 성능을 대폭 향상시켜 트래픽 증가에도 안정적으로 대응할 수 있게 되었습니다",
        "Circuit Breaker 패턴 적용으로 외부 시스템 장애 발생 시에도 서비스 가용성을 99% 이상 유지할 수 있게 되었습니다"
      ]
    },
    "from": "2024.06",
    "to": "2024.11",
    "type": "company",
    "companyName": "noluniverse",
    "link": "https://travel.interpark.com/package-search",
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Elasticsearch",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 예약 서비스",
    "images": ["4.png", "5.png"],
    "description": {
      "summary": "기존 수동으로 처리되던 예약 관리 프로세스를 자동화하여 운영 업무 효율성을 개선했습니다. 예약금 계산부터 출발 확정까지 모든 과정이 자동화되어 고객 응대 품질이 향상되고 결제 및 정산 업무가 자동화되었습니다.",
      "highlights": [
        "Amazon SQS와 Application Event를 활용한 이벤트 기반 아키텍처",
        "MongoDB를 이용한 예약 상태 실시간 추적 및 관리",
        "외부 결제/정산 서비스와의 REST API 연동",
        "예약금 계산 및 출발 확정 로직 자동화",
        "최소 출발 인원 체크 및 출발 확정 자동 변경",
        "SQS 기반 비동기 이벤트 처리"
      ]
    },
    "from": "2023.10",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "AWS Kinesis",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 상품 서비스",
    "images": ["3.png"],
    "description": {
      "summary": "기존 고정 패키지 구성을 유연한 모듈형으로 전환하기 위해 항공, 호텔, 투어를 독립적으로 관리하고 자유롭게 조합할 수 있는 상품 시스템을 구축했습니다. 고객 선택권을 확대하고 외부 랜드사 직접 등록으로 상품 소싱을 다각화했습니다.",
      "highlights": [
        "Amazon SQS와 AWS Kinesis를 활용한 상품 변경 이벤트 스트리밍",
        "MongoDB를 활용한 상품 정보 관리",
        "Redis를 이용한 상품 조합 캐시 및 빠른 조회 성능 확보",
        "외부 랜드사 API 연동 구현",
        "항공, 호텔, 투어 독립 등록 및 자유로운 조합 기능",
        "확장 가능한 마이크로서비스 아키텍처"
      ]
    },
    "from": "2023.08",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "AWS Kinesis",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 어드민",
    "description": {
      "summary": "기존 분산된 관리 도구들을 하나의 통합 시스템으로 일원화하여 운영자 업무 효율성을 개선했습니다. 직관적인 UI/UX와 실시간 데이터 동기화를 통해 정확한 상품/예약 상태 관리가 가능해지고 확장성 및 유지보수성을 확보했습니다.",
      "highlights": [
        "TypeScript + Next.js/React로 SPA 기반 관리자 인터페이스 구축",
        "마이크로서비스들의 REST API 통합",
        "컴포넌트 기반 재사용 가능한 UI 라이브러리 구축",
        "AWS ECS 환경에서 정적 파일 배포 및 CI/CD 파이프라인 구성",
        "컴포넌트 기반 아키텍처로 확장성 및 유지보수성 확보"
      ]
    },
    "from": "2023.08",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "TypeScript",
      "Next.js",
      "React",
      "MongoDB",
      "RestAPI",
      "AWS ECS",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "신규패키지 시스템 개발 (1차)",
    "description": {
      "summary": "기존 C# 기반 시스템을 Java SpringBoot로 전환하는 1차 포팅 프로젝트였습니다. 자동화 없이 단순 포팅 위주로 진행하다가 이후 자동화/상품모듈화 방향으로 바뀌면서 중단되었지만, Java와 JPA 기술 학습 경험을 쌓을 수 있었습니다.",
      "highlights": [
        "MySQL과 JPA 기반 데이터 계층 재설계 및 성능 최적화",
        "아키텍처 패턴 적용으로 확장성 및 유지보수성 확보",
        "C# 기반 핵심 기능의 Java로 안정적 포팅",
        "신규 기능 확장을 위한 기반 아키텍처 구축",
        "마이크로서비스 도입을 위한 기반 설계",
        "확장 가능한 도메인 중심 설계 적용"
      ]
    },
    "from": "2023.06",
    "to": "2023.08",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Java",
      "SpringBoot",
      "MySQL",
      "JPA",
      "RestAPI",
      "HexagonalArchitecture"
    ]
  },
  {
    "name": "현대카드 PLCC 연동",
    "images": ["6.png"],
    "description": {
      "summary": "현대카드와의 제휴를 통해 PLCC 회원들에게 NOL 포인트 서비스를 제공하기 위한 시스템을 구축했습니다. 사내 정산서비스를 통해 현대카드와 연동하고 가입 상태별 메시지 분기 처리, 포인트 사용 제약 등을 구현했습니다.",
      "highlights": [
        "사내 정산서비스 연동을 통한 포인트 처리 자동화",
        "회원 상태별 자동 적립률 적용 로직 구현",
        "NOL 포인트 적립/사용 프로세스 구축",
        "회원 등급별 차별화된 혜택 관리 시스템",
        "포인트 최대 사용 제약 및 연동 처리"
      ]
    },
    "from": "2023.05",
    "to": "2023.06",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET MVC",
      "RestAPI",
      "MSSQL",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "모두투어 패키지 상품 연동",
    "description": {
      "summary": "외부 공급사인 모두투어와의 상품 연동을 통해 상품 선택권을 다양화하고 운영 효율성을 개선했습니다. 수동 상품 등록에서 자동 연동으로 전환하여 실시간 예약 처리가 가능해지고 고객 편의성 및 만족도를 향상시켰습니다.",
      "highlights": [
        "모두투어 API 실시간 연동으로 상품 정보 자동 동기화",
        "예약 생성/취소 API 자동화로 고객 예약 즉시 처리",
        "Windows Batch 기반 상품 데이터 동기화 스케줄링",
        "상품 정보 매핑 로직으로 내부 표준 데이터 구조 변환",
        "데이터 검증 로직으로 상품 정보 정확성 확보",
        "연동 오류 모니터링 및 알림 시스템 구축"
      ]
    },
    "from": "2023.03",
    "to": "2023.04",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET MVC",
      "RestAPI",
      "MSSQL",
      "Windows Batch",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "패키지 여행 상품 메인 개편",
    "images": ["7.png"],
    "description": {
      "summary": "패키지 여행 메인 페이지의 전시 구조를 개선하여 사용자 탐색 편의성을 높이고 운영 관리 효율성을 증대시켰습니다. 통합된 데이터 구조와 API 아키텍처 개선을 통해 향후 기능 추가 용이성을 확보하고 메인 페이지 성능을 향상시켰습니다.",
      "highlights": [
        "C#/Java SpringBoot 기반 통합 API로 데이터 제공 표준화",
        "상품 전시 레이아웃 최적화로 사용자 탐색 편의성 향상",
        "데이터 정합성 검증 로직으로 상품 정보 신뢰성 확보",
        "API 응답 구조 개선으로 프론트엔드 성능 최적화",
        "메인 페이지 로딩 성능 개선",
        "상품 데이터 캐싱 최적화로 응답 속도 개선"
      ]
    },
    "from": "2023.01",
    "to": "2023.02",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET WebAPI",
      "Java",
      "SpringBoot",
      "RestAPI",
      "Github Actions",
      "CI/CD",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "네이버 패키지 상품 연동",
    "images": ["8.png"],
    "description": {
      "summary": "네이버 해외패키지 플랫폼 입점을 통해 판매 채널을 확대하기 위한 상품 연동 시스템을 구축했습니다. 실시간 상품 정보 동기화를 통해 정확한 데이터를 제공하고 상품 노출 최적화를 구현했습니다.",
      "highlights": [
        "네이버 해외패키지 전용 API 연동 구현",
        "실시간 상품 정보 동기화 시스템",
        "네이버 API 규격에 맞춘 데이터 포맷 변환",
        "상품 노출 최적화로 검색 가시성 향상"
      ]
    },
    "from": "2021.11",
    "to": "2022.01",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "RestAPI",
      "MSSQL",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "구패키지 시스템 운영 및 개선",
    "description": {
      "summary": "대용량 예약/결제 시스템의 안정적 운영을 담당하며 지속적인 개선을 통해 서비스 품질을 향상시켰습니다. 담당자 업무 편의 기능을 지속적으로 개발하고 로그 수집 도구들을 활용하여 시스템 운영 효율성을 높였습니다.",
      "highlights": [
        "대용량 예약/결제 시스템 안정적 운영",
        "담당자 업무 편의 기능 지속적 개발",
        "배치 작업 최적화로 데이터 처리 효율성 향상",
        "시스템 성능 모니터링 및 튜닝",
        "Filebeat, Logstash, Elasticsearch, Kibana 활용"
      ]
    },
    "from": "2021.06",
    "to": "2023.06",
    "type": "company",
    "companyName": "noluniverse",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET",
      "Vue.js",
      "Java",
      "MSSQL",
      "IIS",
      "Kafka",
      "Batch",
      "Stored Procedure",
      "Jenkins",
      "Filebeat",
      "Logstash",
      "Elasticsearch",
      "Kibana"
    ]
  },
  {
    "name": "CMS Mobile",
    "images": ["9.png", "10.png", "11.png", "12.png"],
    "description": {
      "summary": "자동 이체 결과나 고객 상담 내역 등을 모바일로 관리할 수 있는 크로스 플랫폼 모바일 앱을 개발했습니다. Xamarin을 활용한 통합 개발로 개발 효율성과 유지보수성을 확보하고 Firebase 푸시 알림으로 실시간 고객 응대를 지원했습니다.",
      "highlights": [
        "Xamarin 기반 Android/iOS 통합 개발",
        "Firebase 푸시 알림으로 실시간 고객 응대 지원",
        "SQLite 로컬 데이터베이스로 데이터 관리",
        "자동 이체 결과 및 고객 상담 내역 모바일 관리",
        "크로스 플랫폼 개발로 유지보수 비용 절감"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "Xamarin",
      "Android",
      "iOS",
      "Firebase",
      "SQLite"
    ]
  },
  {
    "name": "AutoCMS (자동 이체 시스템)",
    "images": ["13.png"],
    "description": {
      "summary": "대량 이체 작업의 자동화를 통해 업무 처리 시간을 단축하고 금융기관과의 실시간 연동으로 이체 처리의 정확성과 신뢰성을 확보했습니다. 배치 프로그램 기반 안정적 운영과 체계적인 모니터링을 통해 운영 리소스를 절감했습니다.",
      "highlights": [
        "금융기관 API 실시간 연동으로 정확한 이체 처리",
        "대량 이체 작업 자동화 시스템",
        "Windows 콘솔 기반 배치 프로그램으로 안정적 운영",
        "이체 결과 모니터링으로 처리 상태 실시간 추적",
        "오류 처리 및 재시도 로직으로 처리 신뢰성 확보"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "MSSQL"
    ]
  },
  {
    "name": "CRM 시스템",
    "description": {
      "summary": "통합 고객 관리를 위한 데스크톱/웹 애플리케이션을 개발했습니다. WPF와 ASP.NET으로 크로스 플랫폼을 지원하고 SignalR 실시간 알림을 통해 고객 응대 신속성을 확보했습니다.",
      "highlights": [
        "WPF 기반 데스크톱과 ASP.NET 웹 플랫폼 통합 개발",
        "SignalR 실시간 알림으로 고객 응대 신속성 확보",
        "DevExpress 컴포넌트 활용한 UI 구현",
        "크로스 플랫폼 지원으로 업무 접근성 향상"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "WPF",
      "DevExpress",
      "ASP.NET",
      "SignalR",
      "MSSQL"
    ]
  }
]