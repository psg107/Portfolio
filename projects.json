[
  {
    "name": "AI 챗봇 문서 학습 파이프라인",
    "repository": "PackageInsightAI",
    "status": "in-progress",
    "description": {
      "summary": "여행 패키지 시스템의 다양한 문서들을 AI 챗봇 학습용 데이터로 변환하는 파이프라인을 구축했습니다.",
      "key_features": [
        "5개 외부 시스템(Slack, Jira, Wiki, GitHub, PDF) 통합 데이터 수집 및 MongoDB 저장",
        "OpenAI Vision API 기반 이미지 텍스트 분석 및 Redis 캐싱으로 비용 최적화",
        "LangChain4j ONNX(384차원) + Python FastAPI 이중 임베딩 시스템으로 고품질 RAG 데이터 생성"
      ],
      "challenges": [
        "Slack, Jira, Wiki, GitHub, PDF 등 각기 다른 API 구조와 인증 방식을 가진 외부 시스템들을 통합하여 일관된 데이터 수집 파이프라인을 구축해야 했습니다",
        "매뉴얼 문서에 텍스트와 이미지가 혼재되어 있어 의미있는 정보만을 정확히 추출하고, 불필요한 제목/저작권/반복 내용을 제거하는 전처리 시스템이 필요했습니다",
        "OpenAI Vision API 호출 비용을 최적화하면서도 이미지에서 정확한 텍스트를 추출하고, 중복 분석을 방지하는 효율적인 캐싱 전략이 필요했습니다",
        "팀 내 메인 언어인 Kotlin으로 통합 구현을 시도했으나 LangChain4j의 ONNX 기반 AllMiniLM-L6-v2 모델의 임베딩 품질이 만족스럽지 않아, 고품질 임베딩을 위한 대안적 접근 방식이 필요했습니다",
        "수집된 문서들을 AI 학습에 최적화된 형태로 청킹하고 임베딩하는 과정에서 문서의 의미적 맥락을 유지하면서도 검색 성능을 보장해야 했습니다"
      ],
      "solutions": [
        "Spring Boot RESTful API로 5개 외부 시스템(Slack, Jira, Wiki, GitHub, PDF) 통합 수집 파이프라인 구축",
        "OpenAI Vision API 기반 이미지 텍스트 추출 및 문서 전처리 로직 구현",
        "Redis 통합 캐싱 시스템으로 API 호출 비용 최적화 및 중복 처리 방지",
        "LangChain4j ONNX + Python FastAPI 이중 임베딩 시스템 구축 및 품질 비교 검증",
        "MongoDB 기반 문서 저장소 구축 및 소스별 메타데이터 체계적 관리"
      ],
      "performance_results": [
        "Redis 캐싱 도입으로 OpenAI API 비용을 대폭 절감하고, 동일 이미지 재분석을 완전히 방지하여 처리 효율성을 크게 향상시켰습니다",
        "이중 임베딩 시스템 구축으로 임베딩 품질과 성능을 지속적으로 개선할 수 있는 기반을 마련했습니다. LangChain4j의 ONNX 기반 AllMiniLM-L6-v2 모델과 Python 기반 BAAI/bge-base-en-v1.5 모델을 비교 검증한 결과, Python 기반 모델이 더 높은 품질을 보여 운영 적용을 위한 검증을 진행하고 있습니다",
        "통합 캐시 서비스로 외부 API 호출 횟수를 최소화하고 코드 중복을 제거하여 시스템 유지보수성과 성능을 동시에 개선했습니다",
        "전처리 로직을 통해 불필요한 정보가 제거된 고품질 데이터를 생성하여 AI 학습 효과와 챗봇 응답 품질을 향상시켰습니다",
        "다중 소스 통합 수집 파이프라인으로 개발팀의 문서 관리 효율성을 향상시키고 지식 검색 시스템의 기반을 마련했습니다"
      ],
      "ongoing_challenges": [
        "Jira, Wiki 비정형 문서의 의미 단위 청킹 품질 개선 및 컨텍스트 유지 전략 고도화 필요",
        "이미지 위주 매뉴얼에서 OpenAI Vision API 호출 비용 최적화를 위한 이미지 압축 및 스마트 캐싱 전략 검토",
        "다양한 문서 포맷(HTML, Markdown, PDF)의 비정형성 해결을 위한 통합 전처리 파이프라인 구축 및 품질 검증 체계 마련",
        "이중 임베딩 시스템의 성능 비교 자동화 및 운영 환경에서의 안정성 검증 필요",
        "대용량 문서 처리 시 메모리 사용량 최적화 및 배치 처리 전략 개선 필요"
      ]
    },
    "from": "2025.06",
    "to": "2025.07",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "OpenAI API",
      "RAG",
      "PDF Processing",
      "Image Analysis",
      "RestAPI",
      "Coroutines",
      "Python",
      "FastAPI",
      "LangChain4j",
      "ONNX",
      "Text Embedding"
    ]
  },
  {
    "name": "패키지 예약 시뮬레이팅",
    "repository": "nol-tour/package-reservation",
    "description": {
      "summary": "수동 엑셀 작업으로 진행되던 패키지 상품 수익성 분석을 자동화한 시스템을 구축했습니다.",
      "key_features": [
        "MongoDB 7개 컬렉션 비동기 병렬 조회로 데이터 수집 최적화",
        "예약 건수별 원가 자동 적용 및 수익성 분석",
        "가상 예약 시나리오 실시간 시뮬레이션"
      ],
      "challenges": [
        "패키지 상품의 수익성을 분석하기 위해 MongoDB의 7개 컬렉션에서 예약, 원가, 옵션, 추가요금 등의 데이터를 반복 조회해야 했는데, 이로 인해 분석 응답시간이 지연되는 문제가 있었습니다.",
        "동일한 패키지 상품과 출발일 조합에 대한 원가 정보를 매번 새로 조회하여 중복 처리로 인한 비효율성이 발생했습니다.",
        "여행자 인원 구성(성인, 소아, 유아)에 따라 필요한 호텔 객실 수를 정확히 계산하는 복합적인 로직을 처리해야 했습니다.",
        "패키지 상품의 예약 건수 구간별로 서로 다른 원가가 자동 적용되어야 하는 복잡한 비즈니스 로직을 구현해야 했습니다."
      ],
      "solutions": [
        "Redis 1시간 TTL 캐싱으로 패키지 상품별 분석 결과 저장 및 즉시 응답",
        "Kotlin Coroutines 비동기 병렬 처리로 MongoDB 7개 컬렉션 동시 조회",
        "자체 개발 객실 배정 API 연동으로 인원별 숙박비 자동 계산",
        "예약 건수별 원가 자동 적용 및 실시간 가상 예약 시나리오 시뮬레이션"
      ],
      "performance_results": [
        "동일한 패키지 상품과 출발일 조합에 대한 반복 분석 요청 시 캐시를 활용하여 즉시 응답함으로써 사용자 대기시간을 크게 단축했습니다.",
        "비동기 병렬 조회 방식을 도입하여 전체 분석 성능을 향상시키고 여러 시나리오를 동시에 처리할 수 있게 되었습니다.",
        "수동으로 진행되던 엑셀 기반의 수익성 계산 작업을 완전히 대체하여 실시간 마진 분석이 가능해졌습니다.",
        "다양한 예약 시나리오를 즉시 분석할 수 있게 되어 출발 확정 여부에 대한 최적의 의사결정을 신속하게 내릴 수 있게 되었습니다."
      ],
      "ongoing_challenges": [
        "실시간 가격 변동 반영 및 복잡한 할인 정책 적용 시 로직 복잡도 관리 방안 검토",
        "여행자 인원 구성별 객실 배정 로직의 정확성 검증 및 엣지 케이스 처리 로직 강화 필요"
      ]
    },
    "from": "2025.05",
    "to": "2025.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "RestAPI",
      "TypeScript",
      "React",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 홈쇼핑 관리",
    "repository": ["nol-tour/package-product", "nol-tour/package-reservation"],
    "description": {
      "summary": "홈쇼핑 채널 특화 패키지 여행 판매를 위한 고객 접수부터 예약까지 통합 관리 시스템을 구축했습니다.",
      "key_features": [
        "엑셀 업로드 기반 고객 명단 일괄 등록",
        "온/오프라인 통합 예약 시스템",
        "비회원 인증 및 카카오 알림톡 자동 발송"
      ],
      "challenges": [
        "홈쇼핑 방송 후 수천 건의 고객 접수가 몰리면서 고객 정보 등록, 상담 예약, 결제 처리 등의 복잡한 다단계 업무 프로세스를 수작업으로 처리해야 하는 상황이었습니다.",
        "홈쇼핑 특성상 전화 상담을 통한 오프라인 예약과 온라인 예약이 동시에 진행되어야 했는데, 이 두 경로를 통합 관리할 수 있는 시스템이 필요했습니다.",
        "홈쇼핑 고객들은 대부분 비회원이었기 때문에 기존 회원 인증 체계와는 다른 특수한 인증 방식을 구현해야 했습니다.",
        "홈쇼핑 전용 특가 정책과 한정된 예약 기간 내에서만 유효한 예약 시스템을 관리해야 했습니다.",
        "수백 명의 고객에게 개인화된 알림톡을 실시간으로 발송하고, 해피콜 담당자들에게 업무를 효율적으로 분배해야 했습니다."
      ],
      "solutions": [
        "Apache POI 라이브러리 기반 엑셀 파싱 및 고객 명단 일괄 등록 기능 구현",
        "어드민 수기 예약 생성 API 구축으로 전화 상담 통합 처리",
        "Redis SMS 인증 + 암호화 토큰 기반 비회원 인증 체계 구축",
        "홈쇼핑 전용 할인율 자동 적용 및 예약 기간 실시간 검증 시스템 구현",
        "카카오 알림톡 API 연동 및 해피콜 담당자 자동 배정 알고리즘 구축"
      ],
      "performance_results": [
        "TypeScript + Next.js/React 기반 SPA로 직관적인 관리자 인터페이스 구축하여 운영자 업무 효율성 향상",
        "마이크로서비스들의 REST API 통합으로 분산된 시스템을 하나의 통합 관리 도구로 일원화",
        "컴포넌트 기반 재사용 가능한 UI 라이브러리 구축으로 개발 효율성 및 유지보수성 확보",
        "실시간 데이터 동기화를 통해 정확한 상품/예약 상태 관리 및 확장성 확보"
      ],
      "ongoing_challenges": [
        "홈쇼핑 방송 후 대량 고객 접수 시 시스템 부하 분산 및 동시성 처리 최적화를 위한 큐 시스템 도입 검토",
        "엑셀 업로드 시 데이터 검증 및 오류 처리 로직 고도화 및 사용자 친화적 피드백 시스템 구축 필요",
        "카카오 알림톡 발송 실패 시 재시도 메커니즘 및 대체 알림 방식 개선 및 발송 상태 모니터링 체계 강화 필요",
        "홈쇼핑 특가 정책의 복잡한 할인 규칙 적용 시 로직 유지보수성 향상 및 동적 정책 관리 방안 검토",
        "마이크로서비스 API 통합 시 응답 지연 및 장애 전파 방지 메커니즘 고도화 및 Circuit Breaker 패턴 적용 검토"
      ]
    },
    "from": "2025.03",
    "to": "2025.04",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "RestAPI",
      "TypeScript",
      "React",
      "Apache POI",
      "Kakao API",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 공급사 연동 서비스",
    "repository": "nol-tour/package-supplier",
    "isCore": true,
    "hero": {
      "summary": "외부 공급사 상품 데이터를 실시간으로 동기화하는 연동 시스템",
      "metrics": ["실시간 동기화", "3단계 검증"]
    },
    "description": {
      "summary": "외부 공급사와의 대용량 패키지 상품 실시간 연동을 위한 마이크로서비스를 구축했습니다.",
      "key_features": [
        "314만개 대용량 상품 데이터 실시간 동기화",
        "3단계 검증 시스템으로 API 호출 최소화",
        "멀티스레드 병렬 처리로 배치 성능 최적화"
      ],
      "challenges": [
        "일 평균 314만개에 달하는 대용량 패키지 상품 데이터를 실시간으로 동기화하기에는 성능상 한계가 있었습니다.",
        "외부 공급사(모두투어)에서 상품 정보 변경 이벤트나 Webhook을 제공하지 않아 언제 데이터가 변경되었는지 감지하기 어려웠습니다.",
        "외부 공급사와 내부 시스템의 상품 정보 구조가 달라서 데이터를 변환하고 매핑하는 과정이 복잡했습니다.",
        "모든 상품을 지속적으로 폴링하여 확인하기에는 비용과 리소스 부담이 너무 컸습니다."
      ],
      "solutions": [
        "고객 요청 기반 실시간 동기화 전략 및 멀티스레드 병렬 처리 구현",
        "외부 공급사 데이터 표준화 변환 계층 구축 및 자동 대체 상품 제안 로직 구현",
        "3단계 시스템 구축 (새벽 배치 → 백그라운드 동기화 → 실시간 검증)",
        "Redis 분산 락 및 메타데이터 선검증 방식으로 처리 부하 최소화"
      ],
      "performance_results": [
        "15,458개의 기초상품과 314만개의 출발상품에 대한 완전 자동화된 연동 시스템을 구축하여 수동 관리 업무를 완전히 제거했습니다.",
        "멀티스레드 병렬 처리 방식을 도입하여 대용량 배치 수집 작업의 처리 시간을 대폭 단축했습니다.",
        "캐시 시스템과 3단계 검증 구조를 통해 높은 시스템 안정성을 확보했습니다.",
        "고객이 상품에 접근할 때만 실시간 동기화를 수행하는 방식으로 항상 최신 상품 정보를 제공하면서도 시스템 부하를 최소화했습니다."
      ],
      "ongoing_challenges": [
        "314만개 대용량 상품 데이터 실시간 동기화 시 Redis 분산 락 경합 및 성능 최적화를 위한 스마트 배치 처리 전략 도입 검토",
        "모두투어 API 응답 지연 시 타임아웃 처리 및 재시도 메커니즘 고도화 및 Circuit Breaker 패턴 적용 검토",
        "3단계 검증 시스템의 복잡한 비즈니스 로직 유지보수성 및 확장성을 위한 검증 파이프라인 개선 방안 검토",
        "멀티스레드 병렬 처리 시 메모리 사용량 최적화 및 스레드 풀 관리 전략 개선 필요",
        "외부 API 호출 비용 최적화를 위한 스마트 폴링 전략 및 변경 감지 메커니즘 고도화 필요"
      ]
    },
    "from": "2024.10",
    "to": "2024.11",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "AWS Scheduled Task",
      "Amazon SQS",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 통합 검색/전시 서비스",
    "repository": "nol-tour/package-hub",
    "isCore": true,
    "hero": {
      "summary": "C#과 Kotlin 기반의 서로 다른 패키지 시스템을 통합한 검색 허브",
      "metrics": ["시스템 통합", "응답시간 단축"]
    },
    "images": ["1.png", "2.png"],
    "description": {
      "summary": "구패키지와 신패키지 시스템을 통합한 고성능 패키지 여행 상품 검색/전시 허브 서비스를 구축했습니다. 사내 검색 서비스를 활용하여 검색 성능을 최적화했습니다.",
      "key_features": [
        "C#과 Kotlin 시스템 통합 허브 서비스",
        "사내 검색 서비스 연동 및 사전 계산 캐싱으로 검색 응답시간 8초→1초 최적화",
        "서킷브레이커 패턴으로 장애 격리 및 Redis 다층 캐시로 검색 성능 최적화"
      ],
      "challenges": [
        "기존 구패키지 시스템(C# 기반)과 신규패키지 시스템(Kotlin 기반)의 API 응답 구조가 달라서 하나의 검색 결과로 통합하여 정렬하고 필터링하기 어려웠습니다.",
        "사내 검색 서비스가 2단계 구조로 되어있어 검색 조건에 따라 응답시간이 1초에서 8초까지 크게 편차가 났습니다.",
        "구패키지나 신패키지 시스템 중 하나에 장애가 발생하면 전체 검색 서비스가 중단되는 위험이 있었습니다.",
        "사내 검색 서비스의 텍스트 매칭 점수와 비즈니스 추천 점수를 조합하여 최적의 검색 결과 순서를 만드는 알고리즘을 설계해야 했습니다."
      ],
      "solutions": [
        "구/신패키지 시스템 API 응답 통합 변환 계층 구축 및 Kotlin Coroutine 병렬 호출",
        "사내 검색 서비스 연동 및 인기 상품 대표출발일 사전 계산 저장으로 검색 최적화",
        "서킷브레이커 패턴 기반 장애 격리 시스템 구축",
        "Redis 다층 캐시 + MongoDB 집계 파이프라인으로 검색 성능 최적화"
      ],
      "performance_results": [
        "인기 검색어에 대한 결과를 사전에 계산하여 저장함으로써 최대 8초가 걸리던 검색을 1초 이내로 단축했습니다.",
        "대표출발일 정보를 미리 계산해두는 최적화를 통해 10,000개 상품도 1초 이내에 검색 결과를 반환할 수 있게 되었습니다.",
        "비동기 병렬 처리를 도입하여 동시에 여러 검색 요청이 들어와도 처리 성능이 크게 향상되었습니다.",
        "서킷브레이커를 통한 장애 격리 시스템으로 한쪽 시스템에 문제가 생겨도 높은 서비스 가용성을 유지할 수 있게 되었습니다."
      ],
      "ongoing_challenges": [
        "C#과 Kotlin 시스템 통합 시 API 응답 구조 차이로 인한 데이터 변환 복잡성 관리 및 통합 어댑터 패턴 고도화 필요",
        "사내 검색 서비스의 텍스트 매칭 점수와 비즈니스 추천 점수 조합 알고리즘 최적화",
        "Redis 다층 캐시와 MongoDB 집계 파이프라인의 동기화 및 일관성 유지 개선을 위한 이벤트 기반 캐시 무효화 전략 도입 검토",
        "대용량 상품 데이터 처리 시 메모리 사용량 최적화 및 검색 성능 안정성을 위한 인덱스 최적화 및 쿼리 튜닝 필요",
        "서킷브레이커 패턴의 임계값 동적 조정 및 장애 복구 자동화 메커니즘 고도화 필요",
        "검색 결과 개인화 및 추천 시스템 고도화를 위한 사용자 행동 분석"
      ]
    },
    "from": "2024.06",
    "to": "2024.11",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": "https://travel.interpark.com/package-search",
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Elasticsearch",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 예약 서비스",
    "repository": "nol-tour/package-reservation",
    "isCore": true,
    "hero": {
      "summary": "항공·호텔·투어 등 여러 구성요소를 하나로 묶는 복합 예약 시스템",
      "metrics": ["복합 예약", "분산 트랜잭션"]
    },
    "images": ["4.png", "5.png"],
    "description": {
      "summary": "다채널 예약과 다공급사 연동을 위한 분산 아키텍처 기반 패키지 여행 예약 서비스를 구축했습니다.",
      "key_features": [
        "다채널 예약과 다공급사 연동 분산 아키텍처",
        "MongoDB 11개 컬렉션 분산 트랜잭션 관리",
        "SQS/Kinesis 비동기 메시지 처리"
      ],
      "challenges": [
        "홈쇼핑, 모두투어 등 다양한 판매 채널과 그룹항공, 파트너센터 등 여러 공급사들이 각각 서로 다른 API 규격과 예약 프로세스를 가지고 있어 통합 관리가 어려웠습니다.",
        "하나의 패키지 여행이 항공, 호텔, 투어, 옵션 등 여러 구성요소로 이루어져 있어 각각을 개별적으로 예약해야 했고, 하나라도 실패하면 전체를 롤백해야 하는 복잡한 트랜잭션 관리가 필요했습니다.",
        "각 공급사별로 예약 상태 변경이 비동기적으로 발생하는데, 이를 실시간으로 통합하여 고객에게 정확한 예약 상태를 제공해야 했습니다.",
        "홈쇼핑은 대량 배치 처리가, 모두투어는 실시간 개별 처리가 필요한 등 채널별로 완전히 다른 처리 방식이 요구되었습니다."
      ],
      "solutions": [
        "AWS SQS 비동기 메시지 처리 + AWS Kinesis 실시간 이벤트 기반 공급사별 독립 예약 시스템 구축",
        "Kotlin Coroutines 병렬 처리 + 보상 트랜잭션 기반 분산 트랜잭션 관리 시스템 구축",
        "Redis 실시간 캐싱 + MongoDB 집계 파이프라인으로 공급사별 예약 상태 통합 관리",
        "채널별 최적화 (홈쇼핑: 대량 배치, 모두투어: 실시간 개별 연동)"
      ],
      "performance_results": [
        "MongoDB 집계 파이프라인과 Kotlin Coroutines를 활용하여 11개 컬렉션에 분산된 예약 데이터를 1초 이내에 통합 조회할 수 있게 최적화했습니다.",
        "SQS와 Kinesis를 활용한 비동기 처리 방식으로 공급사 장애의 영향을 최소화하고 높은 서비스 가용성을 확보했습니다.",
        "Redis 캐싱과 분산 락 시스템을 통해 동시 예약 처리 성능을 향상시키고 중복 결제를 완전히 방지했습니다.",
        "각 채널별 특성에 맞춘 최적화를 통해 홈쇼핑의 대량 배치 처리와 모두투어의 실시간 연동 모두에서 높은 효율성을 달성했습니다."
      ],
      "ongoing_challenges": [
        "MongoDB 11개 컬렉션 분산 트랜잭션 관리 시 데이터 정합성 및 롤백 복잡성 해결",
        "SQS/Kinesis 비동기 메시지 처리 시 데드레터 큐 관리 및 재처리 메커니즘 고도화 및 메시지 순서 보장 전략 도입 검토",
        "다채널 예약과 다공급사 연동 시 동시성 제어 및 장애 격리 전략 개선을 위한 Circuit Breaker 패턴 및 타임아웃 관리 체계 강화 필요",
        "복잡한 예약 상태 변경 이벤트 처리 시 이벤트 순서 보장 및 중복 처리 방지 로직 강화",
        "대용량 예약 처리 시 성능 최적화를 위한 배치 처리 전략 및 메모리 사용량 관리 개선 필요",
        "다채널 예약 시스템의 통합 모니터링 및 알림 체계 구축 및 장애 조기 감지 메커니즘 고도화 필요"
      ]
    },
    "from": "2023.10",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "AWS Kinesis",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 상품 서비스",
    "repository": "nol-tour/package-product",
    "images": ["3.png"],
    "description": {
      "summary": "모듈형 아키텍처 기반으로 항공/호텔/투어를 자유 조합할 수 있는 패키지 여행 상품 서비스를 구축했습니다.",
      "key_features": [
        "모듈형 아키텍처로 항공/호텔/투어 독립 관리 및 자유 조합",
        "AWS SQS + Kinesis 이벤트 기반 아키텍처로 상품 변경 시 관련 시스템 자동 동기화",
        "Redis 캐싱과 낙관적 락으로 동시성 문제 해결"
      ],
      "challenges": [
        "기존에는 항공, 호텔, 투어가 하나의 고정된 패키지로만 판매되어 고객의 선택권이 제한되고 운영상 비효율성이 발생했습니다.",
        "모두투어, 네이버 등 외부 공급사들과 내부 시스템의 상품 정보 구조가 달라서 실시간으로 데이터를 동기화하기 어려웠습니다.",
        "여러 사용자가 동시에 같은 상품을 예약하거나 수정할 때 데이터 정합성 문제와 동시성 제어 문제가 발생했습니다.",
        "상품 정보가 변경될 때마다 연관된 예약, 검색, 전시 시스템을 수동으로 업데이트해야 하는 번거로움이 있었습니다.",
        "외부 공급사의 실시간 가격 변동으로 인해 고객이 예약 과정에서 가격 불일치를 경험하는 문제가 있었습니다."
      ],
      "solutions": [
        "항공/호텔/투어 모듈형 독립 아키텍처 구축으로 자유로운 상품 조합 구현",
        "AWS SQS + Kinesis 이벤트 스트리밍 기반 실시간 동기화 시스템 구축",
        "Redis 캐싱 + MongoDB 낙관적 락 조합 동시성 제어 시스템 구축",
        "공급사별 최적화 동기화 (파트너센터: Webhook, 모두투어: 하이브리드 폴링)",
        "백그라운드 실시간 가격 조회 및 변경사항 투명 안내 시스템 구축"
      ],
      "performance_results": [
        "모듈형 구조 도입으로 항공, 호텔, 투어 각 구성요소의 재사용이 가능해지고 다양한 조합의 패키지 상품을 쉽게 만들 수 있게 되어 상품 다양성과 운영 유연성이 크게 향상되었습니다.",
        "이벤트 기반 자동 동기화 시스템으로 상품 정보 변경 시 수동으로 여러 시스템을 업데이트하던 작업을 완전히 제거했습니다.",
        "Redis 캐시 시스템을 활용하여 복잡한 상품 조합도 밀리초 단위로 조회할 수 있게 되어 고객 경험이 크게 개선되었습니다.",
        "실시간 가격 검증 시스템을 통해 예약 과정에서의 가격 불일치를 방지하여 예약 신뢰성과 고객 만족도를 향상시켰습니다.",
        "다양한 외부 공급사와의 자동 연동을 통해 상품 다양성과 시장 경쟁력을 크게 강화했습니다."
      ],
      "ongoing_challenges": [
        "이벤트 기반 아키텍처의 이벤트 순서 보장 및 중복 처리 방지 메커니즘 고도화 및 이벤트 버전 관리 체계 구축 필요",
        "Redis 캐싱과 MongoDB 낙관적 락 조합 시 동시성 제어 복잡성 관리 및 락 타임아웃 및 데드락 방지 전략 고도화 필요",
        "외부 공급사 실시간 가격 변동 시 캐시 무효화 및 데이터 일관성 유지 전략 개선 및 이벤트 기반 캐시 갱신 메커니즘 도입 검토",
        "모듈형 상품 구조의 버전 관리 및 호환성 유지 전략 구축 및 상품 스키마 진화 관리 체계 마련 필요",
        "다양한 외부 공급사와의 연동 시 API 변경 대응 및 버전 관리 시스템 구축"
      ]
    },
    "from": "2023.08",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "AWS Kinesis",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 어드민",
    "repository": "nol-tour/package-platform-admin",
    "description": {
      "summary": "기존 분산된 관리 도구들을 하나의 통합 시스템으로 일원화하여 운영자 업무 효율성을 개선했습니다. 직관적인 UI/UX와 실시간 데이터 동기화를 통해 정확한 상품/예약 상태 관리가 가능해지고 확장성 및 유지보수성을 확보했습니다.",
      "key_features": [
        "TypeScript + Next.js/React로 SPA 기반 관리자 인터페이스 구축",
        "마이크로서비스들의 REST API 통합",
        "컴포넌트 기반 재사용 가능한 UI 라이브러리 구축"
      ]
    },
    "from": "2023.08",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "TypeScript",
      "Next.js",
      "React",
      "MongoDB",
      "RestAPI",
      "AWS ECS",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "현대카드 PLCC 연동",
    "repository": ["nol-tour/tour-db", "nol-tour/package-api"],
    "images": ["6.png"],
    "description": {
      "summary": "현대카드와의 제휴를 통해 PLCC 회원들에게 NOL 포인트 서비스를 제공하기 위한 시스템을 구축했습니다. 사내 정산서비스를 통해 현대카드와 연동하고 가입 상태별 메시지 분기 처리, 포인트 사용 제약 등을 구현했습니다.",
      "key_features": [
        "사내 정산서비스 연동을 통한 포인트 처리 자동화",
        "회원 상태별 자동 적립률 적용 로직 구현",
        "NOL 포인트 적립/사용 프로세스 구축"
      ]
    },
    "from": "2023.05",
    "to": "2023.06",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET MVC",
      "RestAPI",
      "MSSQL",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "모두투어 패키지 상품 연동",
    "repository": ["nol-tour/tour-db", "nol-tour/package-api"],
    "description": {
      "summary": "외부 공급사인 모두투어와의 상품 연동을 통해 상품 선택권을 다양화하고 운영 효율성을 개선했습니다. 수동 상품 등록에서 자동 연동으로 전환하여 실시간 예약 처리가 가능해지고 고객 편의성 및 만족도를 향상시켰습니다.",
      "key_features": [
        "모두투어 API 실시간 연동으로 상품 정보 자동 동기화",
        "예약 생성/취소 API 자동화로 고객 예약 즉시 처리",
        "MSSQL Job 기반 상품 데이터 동기화 스케줄링"
      ]
    },
    "from": "2023.03",
    "to": "2023.04",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET MVC",
      "RestAPI",
      "MSSQL",
      "Windows Batch",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "패키지 여행 상품 메인 개편",
    "repository": ["nol-tour/tour-db", "nol-tour/package-api"],
    "images": ["7.png"],
    "description": {
      "summary": "패키지 여행 메인 페이지의 전시 구조를 개선하여 사용자 탐색 편의성을 높이고 운영 관리 효율성을 증대시켰습니다. 통합된 데이터 구조와 API 아키텍처 개선을 통해 향후 기능 추가 용이성을 확보하고 메인 페이지 성능을 향상시켰습니다.",
      "key_features": [
        "C#/Java SpringBoot 기반 통합 API로 데이터 제공 표준화",
        "상품 전시 레이아웃 최적화로 사용자 탐색 편의성 향상",
        "메인 페이지 로딩 성능 개선"
      ]
    },
    "from": "2023.01",
    "to": "2023.02",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET WebAPI",
      "Java",
      "SpringBoot",
      "RestAPI",
      "Github Actions",
      "CI/CD",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "네이버 패키지 상품 연동",
    "repository": ["nol-tour/tour-db", "nol-tour/package-api"],
    "images": ["8.png"],
    "description": {
      "summary": "네이버 해외패키지 플랫폼 입점을 통해 판매 채널을 확대하기 위한 상품 연동 시스템을 구축했습니다. 실시간 상품 정보 동기화를 통해 정확한 데이터를 제공하고 상품 노출 최적화를 구현했습니다.",
      "key_features": [
        "네이버 해외패키지 전용 API 연동 구현",
        "실시간 상품 정보 동기화 시스템",
        "네이버 API 규격에 맞춘 데이터 포맷 변환",
        "상품 노출 최적화로 검색 가시성 향상"
      ]
    },
    "from": "2021.11",
    "to": "2022.01",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "RestAPI",
      "MSSQL",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "구패키지 시스템 운영 및 개선",
    "repository": ["nol-tour/tour-db", "nol-tour/package-api"],
    "description": {
      "summary": "대용량 예약/결제 시스템의 안정적 운영을 담당하며 지속적인 개선을 통해 서비스 품질을 향상시켰습니다. 담당자 업무 편의 기능을 지속적으로 개발하고 로그 수집 도구들을 활용하여 시스템 운영 효율성을 높였습니다.",
      "key_features": [
        "대용량 예약/결제 시스템 안정적 운영",
        "담당자 업무 편의 기능 지속적 개발",
        "배치 작업 최적화로 데이터 처리 효율성 향상"
      ]
    },
    "from": "2021.06",
    "to": "2023.06",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET",
      "Vue.js",
      "Java",
      "MSSQL",
      "IIS",
      "Kafka",
      "Batch",
      "Stored Procedure",
      "Jenkins",
      "Filebeat",
      "Logstash",
      "Elasticsearch",
      "Kibana"
    ]
  },
  {
    "name": "CMS Mobile",
    "images": ["9.png", "10.png", "11.png", "12.png"],
    "description": {
      "summary": "자동 이체 결과나 고객 상담 내역 등을 모바일로 관리할 수 있는 크로스 플랫폼 모바일 앱을 개발했습니다. Xamarin을 활용한 통합 개발로 개발 효율성과 유지보수성을 확보하고 Firebase 푸시 알림으로 실시간 고객 응대를 지원했습니다.",
      "key_features": [
        "Xamarin 기반 Android/iOS 통합 개발",
        "Firebase 푸시 알림으로 실시간 고객 응대 지원",
        "SQLite 로컬 데이터베이스로 데이터 관리"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "serviceCategory": "cms-crm",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "Xamarin",
      "Android",
      "iOS",
      "Firebase",
      "SQLite"
    ]
  },
  {
    "name": "AutoCMS (자동 이체 시스템)",
    "images": ["13.png"],
    "description": {
      "summary": "대량 이체 작업의 자동화를 통해 업무 처리 시간을 단축하고 금융기관과의 실시간 연동으로 이체 처리의 정확성과 신뢰성을 확보했습니다. 배치 프로그램 기반 안정적 운영과 체계적인 모니터링을 통해 운영 리소스를 절감했습니다.",
      "key_features": [
        "금융기관 API 실시간 연동으로 정확한 이체 처리",
        "대량 이체 작업 자동화 시스템",
        "Windows 콘솔 기반 배치 프로그램으로 안정적 운영"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "serviceCategory": "cms-crm",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "MSSQL"
    ]
  },
  {
    "name": "CRM 시스템",
    "description": {
      "summary": "통합 고객 관리를 위한 데스크톱/웹 애플리케이션을 개발했습니다. WPF와 ASP.NET으로 크로스 플랫폼을 지원하고 SignalR 실시간 알림을 통해 고객 응대 신속성을 확보했습니다.",
      "key_features": [
        "WPF 기반 데스크톱과 ASP.NET 웹 플랫폼 통합 개발",
        "SignalR 실시간 알림으로 고객 응대 신속성 확보",
        "DevExpress 컴포넌트 활용한 UI 구현",
        "크로스 플랫폼 지원으로 업무 접근성 향상"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "serviceCategory": "cms-crm",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "WPF",
      "DevExpress",
      "ASP.NET",
      "SignalR",
      "MSSQL"
    ]
  },
  {
    "name": "깃허브 기여도 동기화 프로그램",
    "repository": "https://github.com/psg107/sync-github-contribution",
    "description": {
      "summary": "GitHub API 없이 HTML 파싱을 통해 기여도를 추출하여 동기화하는 프로그램입니다. GitHub과 GitHub Enterprise 계정을 모두 지원하며, 이미 동기화된 기여도는 중복 처리를 방지하여 건너뜁니다.",
      "key_features": [
        "Github, Github Enterprise 계정 지원",
        "HTML 파싱을 통한 기여도 데이터 추출",
        "커밋 생성 및 푸시 자동화"
      ],
      "challenges": [
        "GitHub API 사용 제한으로 인한 HTML 파싱 기반 데이터 추출 필요",
        "GitHub과 GitHub Enterprise의 서로 다른 HTML 구조 처리",
        "중복 기여도 처리 방지 및 효율적인 동기화 로직 구현"
      ],
      "solutions": [
        "Kotlin 기반 HTML 파싱 라이브러리 활용한 기여도 데이터 추출 시스템 구축",
        "GitHub과 GitHub Enterprise 계정별 차별화된 파싱 로직 구현",
        "중복 처리 방지를 위한 로컬 캐싱 및 검증 메커니즘 구축"
      ],
      "performance_results": [
        "GitHub API 제한 없이 기여도 데이터를 안정적으로 추출하여 동기화 성공률 향상",
        "중복 처리 방지로 불필요한 커밋 생성 최소화 및 저장소 깔끔성 유지",
        "GitHub Enterprise 환경에서도 동일한 기능 제공으로 확장성 확보"
      ],
      "ongoing_challenges": [
        "GitHub HTML 구조 변경 시 파싱 로직 업데이트 필요 및 자동 감지 메커니즘 도입 검토",
        "대량 계정 처리 시 성능 최적화 및 병렬 처리 전략 개선 필요",
        "기여도 데이터 정확성 검증 및 오류 처리 로직 고도화 필요"
      ]
    },
    "from": "2025",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "link": "https://github.com/psg107/sync-github-contribution",
    "linkVisible": true,
    "skills": [
      "Kotlin"
    ]
  },
  {
    "name": "카카오톡 이모티콘 추출기",
    "repository": "https://github.com/psg107/KEmojiExtractorDotnet",
    "description": {
      "summary": "기존 C++ 버전의 사용성 문제를 해결하기 위해 C#으로 재작성한 카카오톡 이모티콘 추출 프로그램입니다. WinAPI를 활용한 프로세스 메모리 직접 접근을 통해 카카오톡 PC 버전에서 WebP 이미지 파일을 추출합니다.",
      "key_features": [
        "WinAPI를 활용한 프로세스 메모리 접근 및 관리",
        "WebP 이미지 파일 식별 및 추출",
        "안정적인 메모리 관리와 예외 처리"
      ],
      "challenges": [
        "카카오톡 PC 버전의 메모리 구조 분석 및 동적 주소 추적 필요",
        "WebP 이미지 파일 형식 식별 및 안전한 추출 로직 구현",
        "프로세스 메모리 접근 시 발생할 수 있는 보안 및 안정성 문제 해결"
      ],
      "solutions": [
        "C# 기반 WinAPI 래퍼 라이브러리 활용한 안전한 프로세스 메모리 접근 시스템 구축",
        "WebP 파일 시그니처 기반 이미지 파일 식별 및 추출 로직 구현",
        "예외 처리 및 메모리 관리 최적화를 통한 안정성 향상"
      ],
      "performance_results": [
        "기존 C++ 버전 대비 사용성 개선 및 개발 효율성 향상",
        "안정적인 메모리 관리로 크래시 발생률 대폭 감소",
        "WebP 이미지 파일 추출 성공률 향상 및 품질 보장"
      ],
      "ongoing_challenges": [
        "카카오톡 버전 업데이트 시 메모리 구조 변경 대응 및 자동 감지 메커니즘 도입 검토",
        "다양한 이미지 형식 지원 확장 및 파일 압축 최적화 필요",
        "보안 정책 변경에 따른 대안적 접근 방식 연구 및 구현 필요"
      ]
    },
    "from": "2023",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "link": "https://github.com/psg107/KEmojiExtractorDotnet",
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "C++",
      "WinAPI"
    ]
  },
  {
    "name": "SRT 자동 예매",
    "repository": "https://github.com/psg107/SRT_Ticketing",
    "description": {
      "summary": "SRT 앱의 API를 역분석하여 로그인부터 좌석 조회, 예매까지의 전체 과정을 자동화한 프로그램입니다. 사용자가 원하는 조건에 맞는 티켓을 실시간으로 모니터링하고 자동으로 예매합니다.",
      "key_features": [
        "RestAPI 기반 자동 로그인 및 세션 관리",
        "사용자 지정 조건(날짜/시간/좌석)에 따른 예매 자동화",
        "실시간 좌석 조회 및 예매 처리",
        "안정적인 예외 처리 및 재시도 메커니즘"
      ],
      "challenges": [
        "SRT 앱의 API 구조 역분석 및 인증 프로세스 파악 필요",
        "실시간 좌석 조회 시 서버 부하 최소화 및 안정성 확보",
        "복잡한 예매 조건 처리 및 동시성 제어 구현"
      ],
      "solutions": [
        "C# 기반 HTTP 클라이언트 라이브러리 활용한 SRT API 연동 시스템 구축",
        "스마트 폴링 전략 및 요청 간격 최적화를 통한 서버 부하 최소화",
        "사용자 정의 조건 기반 예매 로직 및 재시도 메커니즘 구현"
      ],
      "performance_results": [
        "수동 예매 대비 예매 성공률 대폭 향상 및 사용자 편의성 증대",
        "실시간 모니터링으로 원하는 조건의 티켓 확보 가능성 증가",
        "안정적인 예외 처리로 장시간 운영 시에도 안정성 보장"
      ],
      "ongoing_challenges": [
        "SRT API 구조 변경 시 자동 대응 및 버전 관리 시스템 도입 검토",
        "다중 사용자 동시 접근 시 서버 부하 분산 및 큐 시스템 도입 검토",
        "예매 성공률 향상을 위한 머신러닝 기반 최적 예매 시점 예측 시스템 연구 필요"
      ]
    },
    "from": "2022",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "link": "https://github.com/psg107/SRT_Ticketing",
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "RestAPI"
    ]
  },
  {
    "name": "나우웨이팅 매장 크롤러 및 원격 예약 프로그램",
    "images": [
      "22.png",
      "23.png"
    ],
    "description": {
      "summary": "인기 맛집의 긴 대기시간 문제를 해결하기 위해 나우웨이팅 서비스를 활용한 원격 예약 시스템을 구축했습니다. 크롤러를 통해 실시간으로 매장 정보를 수집하고 지역별 필터링 기능을 제공합니다.",
      "key_features": [
        "크롤러를 통한 실시간 매장 정보 수집",
        "매장 검색 및 이름/지역별 필터링 기능 제공",
        "원격 매장 예약"
      ],
      "challenges": [
        "나우웨이팅 서비스의 동적 웹페이지 구조 분석 및 크롤링 로직 구현",
        "실시간 매장 정보 수집 시 서버 부하 최소화 및 안정성 확보",
        "지역별 필터링 및 검색 기능의 정확성과 성능 최적화"
      ],
      "solutions": [
        "C# 기반 웹 크롤링 라이브러리 활용한 실시간 매장 정보 수집 시스템 구축",
        "스마트 요청 간격 조정 및 캐싱 전략을 통한 서버 부하 최소화",
        "Blazor 기반 사용자 친화적 인터페이스 및 필터링 시스템 구현"
      ],
      "performance_results": [
        "인기 맛집 예약 성공률 대폭 향상 및 사용자 만족도 증대",
        "실시간 매장 정보 제공으로 예약 가능 매장 발견 가능성 증가",
        "지역별 필터링으로 사용자 편의성 및 검색 효율성 향상"
      ],
      "ongoing_challenges": [
        "나우웨이팅 서비스 구조 변경 시 크롤링 로직 자동 업데이트 및 대응 메커니즘 도입 검토",
        "대량 사용자 동시 접근 시 성능 최적화 및 분산 처리 시스템 도입 검토",
        "매장 정보 정확성 검증 및 오류 처리 로직 고도화 필요"
      ]
    },
    "from": "2022",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "MSSQL",
      "EntityFramework",
      "Blazor"
    ]
  },
  {
    "name": "호스트 관리 프로그램",
    "description": {
      "summary": "개발 환경별로 다른 호스트 설정을 빠르게 전환할 수 있는 관리 프로그램을 개발하여 작업 효율성을 개선했습니다. 환경 전환 시 발생할 수 있는 설정 오류를 방지하고 원클릭으로 즉시 전환이 가능합니다.",
      "key_features": [
        "개발/스테이징/운영 환경 설정 관리",
        "원클릭 호스트 전환"
      ],
      "challenges": [
        "다양한 개발 환경별 호스트 설정 관리 및 전환 시 안정성 확보",
        "환경 전환 시 발생할 수 있는 설정 충돌 및 오류 방지",
        "사용자 친화적 인터페이스 및 원클릭 전환 기능 구현"
      ],
      "solutions": [
        "WPF 기반 직관적인 사용자 인터페이스 및 환경별 설정 관리 시스템 구축",
        "호스트 설정 백업 및 복원 메커니즘을 통한 안전한 환경 전환 구현",
        "설정 충돌 감지 및 자동 해결 로직으로 안정성 향상"
      ],
      "performance_results": [
        "환경 전환 시간 대폭 단축 및 개발자 작업 효율성 향상",
        "설정 오류로 인한 개발 지연 최소화 및 안정성 확보",
        "원클릭 전환으로 사용자 편의성 및 접근성 향상"
      ],
      "ongoing_challenges": [
        "새로운 개발 환경 추가 시 확장성 및 유지보수성 개선 필요",
        "호스트 설정 백업 및 동기화 기능 고도화 및 클라우드 연동 검토",
        "다중 사용자 환경에서의 설정 공유 및 협업 기능 도입 검토"
      ]
    },
    "from": "2022",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "WPF",
      "MSSQL"
    ]
  },
  {
    "name": "게시글 자동 추천 프로그램",
    "repository": "https://github.com/psg107/HumorUnivAutoAssist",
    "images": [
      "15.png"
    ],
    "description": {
      "summary": "커뮤니티 게시글의 추천 수를 실시간으로 모니터링하여 29번째 추천이 발생하는 순간 자동으로 30번째 추천을 하는 프로그램입니다. 30번째 추천자가 되어 인기 게시물 등록 알림을 받기 위해 개발했습니다.",
      "key_features": [
        "XPath 기반 게시글 데이터 추출",
        "정규표현식을 활용한 추천수 분석",
        "조건기반 자동 추천 시스템",
        "실시간 모니터링 및 로깅"
      ],
      "challenges": [
        "커뮤니티 사이트의 동적 웹페이지 구조 분석 및 XPath 기반 데이터 추출",
        "실시간 추천 수 모니터링 및 정확한 타이밍 제어",
        "웹사이트 구조 변경에 대한 안정성 및 유지보수성 확보"
      ],
      "solutions": [
        "C# 기반 웹 스크래핑 라이브러리 활용한 실시간 게시글 모니터링 시스템 구축",
        "정규표현식 기반 추천 수 파싱 및 조건부 자동 추천 로직 구현",
        "예외 처리 및 로깅 시스템을 통한 안정성 및 디버깅 효율성 향상"
      ],
      "performance_results": [
        "30번째 추천자 달성 성공률 대폭 향상 및 목표 달성률 증대",
        "실시간 모니터링으로 정확한 타이밍 제어 및 추천 성공률 향상",
        "자동화된 프로세스로 수동 모니터링 시간 절약 및 효율성 증대"
      ],
      "ongoing_challenges": [
        "커뮤니티 사이트 구조 변경 시 자동 감지 및 대응 메커니즘 도입 검토",
        "다중 게시글 동시 모니터링 및 우선순위 기반 추천 전략 개선 필요",
        "웹사이트 보안 정책 변경에 따른 대안적 접근 방식 연구 및 구현 필요"
      ]
    },
    "from": "2021",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "link": "https://github.com/psg107/HumorUnivAutoAssist",
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "Regex",
      "XPath"
    ]
  },
  {
    "name": "스크립트 로더",
    "images": [
      "14.png"
    ],
    "description": {
      "summary": "개발 환경에서 자주 사용하는 스크립트들을 효율적으로 관리하고 실행할 수 있는 로더 프로그램을 개발했습니다. 스크립트 분류, 검색, 실행 이력 관리 기능을 제공하여 개발 효율성을 향상시켰습니다.",
      "key_features": [
        "스크립트 분류 및 검색 기능",
        "실행 이력 관리 및 로깅",
        "사용자 정의 스크립트 등록 및 관리"
      ],
      "challenges": [
        "다양한 스크립트 형식 지원 및 안전한 실행 환경 구축",
        "스크립트 분류 및 검색 기능의 직관성과 효율성 확보",
        "실행 이력 관리 및 로깅 시스템의 안정성과 성능 최적화"
      ],
      "solutions": [
        "직관적인 사용자 인터페이스 및 스크립트 분류 시스템 구현",
        "데이터베이스 기반 실행 이력 관리 및 로깅 시스템 구축"
      ],
      "performance_results": [
        "스크립트 실행 시간 대폭 단축 및 개발자 작업 효율성 향상",
        "스크립트 관리 체계화로 재사용성 및 유지보수성 증대",
        "실행 이력 추적으로 디버깅 및 문제 해결 효율성 향상"
      ],
      "ongoing_challenges": [
        "새로운 스크립트 언어 지원 확장 및 플러그인 시스템 도입 검토",
        "스크립트 실행 성능 최적화 및 병렬 처리 기능 개선 필요",
        "클라우드 기반 스크립트 공유 및 협업 기능 도입 검토"
      ]
    },
    "from": "2021",
    "to": null,
    "type": "personal",
    "companyName": "personal",
    "serviceCategory": "personal",
    "linkVisible": false,
    "skills": [
      "C#",
      "WPF",
      "MSSQL"
    ]
  }
]