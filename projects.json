[
  {
    "name": "패키지 예약 시뮬레이팅",
    "description": {
      "summary": "기존 수동 엑셀 계산으로 진행되던 패키지 상품 수익성 분석을 자동화하여 실시간 의사결정을 지원하는 시스템을 구축했습니다. 복잡한 예약 데이터를 실시간으로 분석하고 다양한 시나리오 시뮬레이션을 통해 최적의 출발 확정 판단을 지원합니다.",
      "challenges": [
        "매번 새로운 분석 요청 시마다 동일 출발일의 모든 예약 데이터를 MongoDB에서 조회하고 여행자, 호텔, 교통, 투어, 옵션, 결제 등 7개 컬렉션에서 관련 데이터를 수집하는 과정이 반복되어 응답시간이 길어지는 문제가 있었습니다",
        "동일한 패키지 상품과 출발일에 대한 분석 요청이 여러 번 들어올 때마다 동일한 원가 정보를 외부 상품 서비스에서 중복 조회하는 비효율성이 있었습니다",
        "예약 추가 시나리오 시뮬레이션에서 호텔 객실 배정 로직이 복합적이었습니다. 성인/소아 인원수에 따른 최소 객실 수 계산, 1인실 사용 시 싱글차지 발생, 객실별 최대 수용 인원 제한 등을 모두 고려해야 했습니다",
        "원가 정보를 예약 건수에 따라 자동으로 적용하는 로직이 복잡했습니다. 예약 건수 구간별로 다른 원가가 적용되고, 시뮬레이션 시에는 기존 예약과 신규 예약을 합산한 총 건수를 기준으로 원가를 재계산해야 했습니다"
      ],
      "solutions": [
        "Redis 캐시를 활용한 분석 결과 임시 저장 시스템을 구축했습니다. 동일한 패키지 상품과 출발일에 대한 첫 번째 분석 결과를 1시간 동안 캐시하여, 이후 시뮬레이션 요청 시에는 캐시된 데이터를 기반으로 즉시 응답할 수 있도록 최적화했습니다",
        "복잡한 예약 데이터 집계를 위해 MongoDB 비동기 조회를 활용했습니다. 7개 컬렉션(예약, 여행자, 호텔, 교통, 투어, 옵션, 결제)을 Kotlin Coroutines로 병렬 조회하여 데이터 수집 시간을 최소화했습니다",
        "패키지 상품 서비스의 객실 배정 API를 활용하여 성인/소아 인원수에 따른 정확한 객실 수와 싱글차지를 자동 계산하도록 구현했습니다. 시뮬레이션 시에도 동일한 로직을 적용하여 현실적인 비용 분석이 가능하도록 했습니다",
        "예약 건수별 원가 적용 로직을 자동화했습니다. 현재 예약 건수를 분석하여 해당하는 원가 구간을 찾고, 시뮬레이션으로 예약이 추가되었을 때의 새로운 구간과 원가를 실시간으로 계산하여 정확한 수익성 분석을 제공했습니다"
      ],
      "technical_details": [
        "패키지 상품과 출발일을 조합한 고유 캐시 키를 생성하고, 1시간 TTL로 분석 결과를 Redis에 임시 저장하여 동일 조건의 반복 계산을 방지하는 캐싱 전략을 구현했습니다",
        "여행자 금액, 옵션 금액, 싱글차지, 추가요금, 패널티 등을 종합적으로 집계하여 총 매출과 수익률을 실시간 계산하는 분석 로직을 구축했습니다",
        "가상의 예약 추가 시나리오를 처리할 때, 기존 예약 통계와 신규 예약을 합산하여 새로운 객실 배정과 싱글차지를 계산하고 이를 바탕으로 변경된 수익성을 즉시 분석할 수 있는 시뮬레이션 로직을 설계했습니다",
        "교통, 호텔, 투어별 원가 정보를 예약 건수 구간에 따라 자동으로 적용하는 원가 시트 시스템을 구현했습니다. 시뮬레이션 시에는 새로운 예약 건수에 맞는 원가를 동적으로 계산하여 정확한 수익성 분석을 제공했습니다",
        "예약 마스터 정보와 관련된 모든 세부 정보(여행자, 교통, 호텔, 투어, 옵션, 결제 등)를 하나의 통합 모델로 집약하여 복잡한 비즈니스 로직을 단순화하고 데이터 일관성을 보장했습니다"
      ],
      "performance_results": [
        "Redis 캐시 도입으로 동일한 패키지 상품과 출발일에 대한 반복 분석 요청 시 응답시간을 대폭 단축했습니다. 첫 번째 분석 후 1시간 내 추가 시뮬레이션은 캐시된 데이터를 활용하여 즉시 응답이 가능해졌습니다",
        "MongoDB 비동기 병렬 조회를 통해 7개 컬렉션에서 관련 데이터를 수집하는 시간을 최소화하여 전체적인 분석 성능을 향상시켰습니다",
        "복잡한 수익성 계산 로직을 자동화하여 기존 수동 엑셀 작업을 완전히 대체했습니다. 여행자 수익, 옵션 수익, 원가, 수수료를 모두 고려한 정확한 마진 분석이 실시간으로 가능해졌습니다",
        "다양한 시나리오 시뮬레이션(예약 추가, 가격 조정, 예약 취소 등)을 즉시 분석하여 최적의 출발 확정 시점과 가격 정책을 결정할 수 있게 되었습니다"
      ]
    },
    "from": "2025.05",
    "to": "2025.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "RestAPI",
      "TypeScript",
      "React",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 홈쇼핑 관리",
    "description": {
      "summary": "홈쇼핑 채널을 통한 패키지 여행 판매에 특화된 전방위 관리 시스템을 구축했습니다. 방송 후 수천 건의 고객 접수부터 전화 상담을 통한 수기 예약 생성까지, 온라인과 오프라인 모든 예약 채널을 통합 관리하여 홈쇼핑 특화 업무 프로세스를 대폭 효율화했습니다.",
      "challenges": [
        "홈쇼핑 방송 후 수천 건의 고객 접수를 관리하는 복잡한 업무 프로세스가 있었습니다. 방송사 제공 엑셀 명단 처리, 고객별 휴대폰 인증, 알림톡 발송, 해피콜 담당자 배정, 메모 관리 등 다단계 작업이 모두 수작업으로 진행되어 처리 시간이 길고 누락 위험이 높았습니다",
        "홈쇼핑 고객의 예약 방식이 다양했습니다. 온라인에서 직접 예약하는 고객도 있지만, 전화로 상담하여 담당자가 대신 예약을 생성해야 하는 고객도 많아서 두 가지 예약 경로를 모두 지원하는 통합 시스템이 필요했습니다",
        "비회원 고객이 홈쇼핑 예약번호만으로 패키지 상품에 접근하고 예약할 수 있는 특수한 인증 체계가 필요했습니다. 상품 탐색은 공유 링크를 통해 누구나 가능하지만, 실제 예약 시에만 SMS 인증을 통해 신원을 확인하는 단계별 접근 제어 시스템을 구현해야 했습니다",
        "홈쇼핑 상품은 일반 상품과 다른 특별 할인가와 혜택을 제공하면서도 예약 기간 제한이 있어, 일반 상품 시스템과 독립적이면서도 연동되는 복잡한 가격 정책 관리 시스템을 구현해야 했습니다",
        "수백 명의 고객에게 실시간으로 상품 안내 알림톡을 발송하고, 해피콜 담당자별로 업무를 균등 분배하면서 진행 상황을 실시간 추적할 수 있는 종합 관리 시스템이 필요했습니다"
      ],
      "solutions": [
        "엑셀 파일 업로드 기반 고객 명단 일괄 등록 시스템을 구현했습니다. 파일 검증을 통해 필수 정보 누락과 중복 예약을 사전 체크하고, 처리 결과를 통계로 제공하여 데이터 품질을 보장했습니다",
        "어드민 수기 예약 시스템을 구축하여 전화 상담 고객에 대응했습니다. 홈쇼핑 예약번호를 연결하여 담당자가 직접 고객 정보를 입력하고 예약을 생성할 수 있도록 하여 온라인과 오프라인 예약 채널을 완전 통합했습니다",
        "토큰 기반 비회원 인증 시스템을 구축했습니다. 상품 탐색은 공유 링크를 통해 자유롭게 접근할 수 있도록 하되, 실제 예약 시에만 휴대폰 SMS 인증을 거쳐 자체 암호화 토큰을 발급하여 홈쇼핑 고객임을 확인하는 단계별 접근 제어를 구현했습니다",
        "홈쇼핑 전용 가격 정책 시스템을 구현했습니다. 일반 상품 가격 조회 후 홈쇼핑 할인율을 적용하여 최종 가격을 산출하고, 예약 기간과 재고를 실시간 검증하여 판매 가능 여부를 동적으로 판단하도록 구현했습니다",
        "종합 업무 관리 대시보드를 구축했습니다. 고객별 알림톡 발송, 해피콜 담당자 자동 배정, 진행 상황 추적, 메모 관리 등 홈쇼핑 업무 전체를 하나의 인터페이스에서 통합 관리할 수 있도록 했습니다"
      ],
      "technical_details": [
        "Apache POI를 활용한 엑셀 파일 파싱 및 검증 시스템을 구현했습니다. 셀 단위 데이터 추출, 필수 항목 검증, 전화번호 형식 검증, 중복 데이터 체크를 수행하고 처리 결과를 상세 통계로 제공했습니다",
        "어드민 수기 예약 생성 API를 구축했습니다. 홈쇼핑 예약번호 연결, 고객 정보 입력, 상품 선택, 가격 계산, 예약 생성까지 전체 프로세스를 API로 제공하여 담당자가 웹 인터페이스에서 손쉽게 예약을 처리할 수 있도록 했습니다",
        "Redis 기반 인증 코드 관리와 자체 토큰 생성 시스템을 구축했습니다. 예약 시점에 휴대폰 인증 코드를 임시 저장하고 인증 성공 시 자체 암호화 방식으로 토큰을 생성하여, 서버에서 토큰을 파싱해 유효성과 만료시간을 검증하는 보안 체계를 구현했습니다",
        "홈쇼핑 예약 상태 관리 시스템을 구현했습니다. 예약 등록 → 알림톡 발송 → 고객 인증 → 패키지 예약 완료까지 각 단계별 상태 전환과 롤백 처리를 안전하게 관리하는 워크플로우를 구축했습니다",
        "카카오 알림톡 API 연동을 통한 개인화 메시지 발송 시스템을 구현했습니다. 홈쇼핑 방송사명, 상품명, 특별 혜택 정보를 동적으로 조합하여 고객별 맞춤 알림톡을 자동 생성하고 발송했습니다",
        "해피콜 담당자 자동 배정 알고리즘을 구현했습니다. 등록된 담당자 목록을 기준으로 예약 건수를 균등 분배하여 업무 부하를 자동으로 분산시키고, 수동 재배정도 가능하도록 유연성을 제공했습니다",
        "통합 관리 대시보드에서 예약 현황 조회, 담당자 배정, 개별 메모 관리, 해피콜 완료 처리, 알림톡 재발송 등 모든 홈쇼핑 업무를 원스톱으로 처리할 수 있는 관리 인터페이스를 구축했습니다"
      ],
      "performance_results": [
        "엑셀 업로드 일괄 등록으로 수천 건의 고객 정보를 1분 내에 시스템 등록할 수 있게 되어 기존 수작업 대비 처리 시간을 대폭 단축했습니다",
        "어드민 수기 예약 시스템으로 전화 상담 고객도 즉시 예약 처리가 가능해져 온라인과 오프라인 모든 예약 채널을 효율적으로 통합 운영할 수 있게 되었습니다",
        "비회원 인증 시스템 도입으로 홈쇼핑 고객이 상품 탐색은 자유롭게, 예약 시에만 간단한 SMS 인증과 자체 암호화 토큰 기반 세션 관리를 통해 예약할 수 있게 되어 고객 편의성과 예약 전환율이 크게 향상되었습니다",
        "자동화된 알림톡 발송과 담당자 배정 시스템으로 수백 명의 고객을 체계적으로 관리할 수 있게 되어 고객 응대 품질의 일관성과 업무 효율성이 동시에 개선되었습니다"
      ]
    },
    "from": "2025.03",
    "to": "2025.04",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "RestAPI",
      "TypeScript",
      "React",
      "Apache POI",
      "Kakao API",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 공급사 연동 서비스",
    "description": {
      "summary": "구패키지 시스템에서 신패키지 시스템으로 전환하면서 외부 공급사(모두투어)와의 실시간 상품 연동을 새롭게 구축한 마이크로서비스입니다. 대용량 상품 데이터(일 평균 기초상품 15,458개, 출발상품 314만개)의 자동 수집/처리와 실시간 변경사항 추적을 통해 운영 효율성을 크게 향상시켰습니다.",
      "challenges": [
        "하루 평균 314만개에 달하는 대용량 여행 상품 데이터를 실시간으로 수집하고 동기화해야 하는 성능상의 한계가 있었습니다. 특히 외부 공급사에서 실시간 변경 이벤트나 Webhook을 제공하지 않고 DB 직접 접근도 불가능한 상황에서 상품 변경을 감지하는 효율적인 방법을 찾아야 했습니다",
        "모두투어와 자사 시스템 간 상품 정보 구조가 달라 데이터 변환 과정에서 정보 손실 없이 정확하게 매핑하는 것이 어려웠습니다. 특히 항공편 정보, 취소 규정, 가격 정책 등 복잡한 여행 상품 속성들을 표준화된 형태로 변환해야 했습니다",
        "314만개 상품을 지속적으로 폴링하는 것은 시스템 리소스와 외부 API 호출 비용 측면에서 비현실적이므로, 고객 요청 기반의 효율적인 동기화 전략이 필요했습니다",
        "실시간 고객 조회와 백그라운드 동기화 작업이 동시에 실행될 때 같은 상품에 대한 중복 처리를 방지하고 데이터 일관성을 보장해야 했습니다"
      ],
      "solutions": [
        "외부 공급사의 제약사항(변경 이벤트 미제공, DB 접근 불가)을 고려하여 고객 요청 기반 동기화 전략을 설계했습니다. 멀티스레드 병렬 처리로 새벽 배치 시간을 대폭 단축하고, 고객 요청 시에만 선택적으로 실시간 동기화를 수행하여 시스템 효율성을 극대화했습니다",
        "표준화된 데이터 변환 계층을 설계하여 모두투어의 복잡한 상품 정보를 자사 시스템에 맞는 형태로 안전하게 변환했습니다. 항공편명이나 가격 변경 시 기존 상품을 자동으로 마감 처리하고 새로운 상품으로 교체하는 자동화 로직을 구현했습니다",
        "대용량 폴링의 비효율성을 해결하기 위해 3단계 검증 시스템을 구축했습니다. 새벽 배치 → 고객 탐색 시 백그라운드 동기화 → 예약 시점 완전 실시간 검증으로 API 호출을 최소화하면서도 데이터 정확성을 보장했습니다",
        "분산 락 메커니즘과 이벤트 기반 아키텍처를 도입하여 동일 상품에 대한 동시 처리를 방지했습니다. 고객 요청 시 가벼운 정보로 상품 변경 여부를 판단한 후 백그라운드에서 동기화 작업을 수행하도록 하여 응답 성능과 데이터 정확성을 모두 확보했습니다"
      ],
      "technical_details": [
        "외부 공급사의 시스템 제약사항(실시간 변경 이벤트 미제공, DB 직접 접근 불가, Webhook 미지원)으로 인해 314만개 상품을 지속적으로 폴링하는 것이 불가능한 상황에서, 매일 새벽 1차 배치로 전체 상품 정보를 동기화하는 현실적인 해결책을 도출했습니다",
        "고객의 실시간 요청 시 가벼운 메타데이터로 상품 변경 여부를 빠르게 판단하여 필요한 경우에만 백그라운드에서 상세 동기화를 수행하는 효율적인 2단계 동기화 시스템을 구현했습니다",
        "고객 탐색 시에는 백그라운드 동기화로 최대한 실시간에 가까운 정보를 제공하고, 실제 예약 시점에는 완전 실시간 체크를 통해 수집된 정보와 최신 정보를 비교하여 변경 사항이 있으면 고객에게 안내 후 즉시 동기화하는 3단계 검증 시스템을 구축했습니다",
        "외부 공급사의 정적 데이터와 실시간 데이터를 조합하여 상품 기본 정보부터 일정, 가격까지 종합적인 상품 정보를 자동으로 수집하고 저장하는 하이브리드 수집 방식을 적용했습니다",
        "상품 변경 사항을 자동으로 감지하여 기존 상품을 적절히 마감 처리하고 새로운 버전의 상품으로 교체하는 버전 관리 시스템을 구축했습니다",
        "분산 락을 통해 동일 상품에 대한 중복 동기화를 방지하고, 실시간 재고 및 가격 조회 API를 제공하면서도 캐시 시스템으로 성능을 최적화했습니다",
        "예약 생성 및 조회 API를 연동하고, 내부 상품 시스템과 표준화된 형태로 데이터를 동기화하는 통합 인터페이스를 구축했습니다",
        "수집 로그를 체계적으로 저장하고 실시간 알림 시스템으로 배치 상태를 모니터링하며, 완료 이벤트를 발행하여 다른 시스템과 연동되도록 구성했습니다"
      ],
      "performance_results": [
        "일 평균 15,458개의 기초상품과 314만개의 출발상품을 완전 자동화하여 신패키지 시스템에서의 공급사 연동을 성공적으로 구축했습니다",
        "병렬 처리 기술 도입으로 대용량 배치 수집 시간을 대폭 단축하여 업무 효율성을 크게 향상시켰습니다",
        "캐시 시스템과 장애 대응 메커니즘으로 외부 시스템 의존성을 최소화하여 99% 이상의 높은 시스템 안정성을 확보했습니다",
        "고객 요청 기반 동기화 시스템으로 해당 상품에 접근하는 고객이 있을 때만 실시간 변경사항을 감지하고 반영하여 상품 정보의 신선도를 향상시켰습니다"
      ]
    },
    "from": "2024.10",
    "to": "2024.11",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "AWS Scheduled Task",
      "Amazon SQS",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 통합 검색/전시 서비스",
    "images": ["1.png", "2.png"],
    "description": {
      "summary": "구패키지(C# 기반)와 신규패키지(Kotlin 기반) 시스템을 동시 운영하면서 양쪽 상품을 통합 검색할 수 있는 허브 서비스를 새롭게 개발했습니다. 20,000개 상품과 2년치 일자별 데이터를 실시간으로 검색/필터링하는 고성능 시스템을 구축했습니다.",
      "challenges": [
        "기존 C# 기반 시스템과 신규 Kotlin 시스템의 API 응답 구조가 완전히 달라서, 단순 병합으로는 정렬과 필터링이 불가능했습니다. 각 시스템당 평균 500ms 응답시간으로 순차 호출 시 1초 이상 걸리는 성능 문제가 있었습니다",
        "사내 검색엔진(Andor)의 2단계 검색 구조로 인한 성능 병목이 심각했습니다. 1차 필터링에서 최대 10,000개 상품이 반환되고, 2차에서 각 상품별로 MongoDB 조회와 외부 시스템 통신을 통한 다이나믹 데이터 주입 과정에서 검색 조건에 따라 1초~8초까지 응답시간이 크게 차이났습니다",
        "검색 요청이 급증하는 시간대에 외부 시스템 중 하나라도 장애가 나면 전체 검색 서비스가 먹통이 되는 단일 장애점 문제가 있었습니다",
        "검색엔진의 텍스트 매칭 점수와 비즈니스 로직의 상품 추천 점수를 어떻게 조합해서 사용자에게 최적의 검색 결과를 보여줄지에 대한 알고리즘 설계가 필요했습니다"
      ],
      "solutions": [
        "어댑터 패턴을 적용해 C#과 Kotlin 시스템의 서로 다른 API 응답을 하나의 통일된 인터페이스로 추상화했습니다. Kotlin Coroutine으로 두 시스템을 병렬 호출하여 응답시간을 절반으로 단축했습니다",
        "상품 색인 시 2년치 날짜 범위에서 최저가 날짜 정보를 '대표출발일' 스태틱 필드로 미리 저장하여, 다이나믹 필드 없는 검색 시 2차 데이터 주입 과정을 완전히 생략할 수 있도록 최적화했습니다",
        "팩토리 패턴과 전략 패턴으로 플랫폼별(Package/WorldIn) 검색 로직을 모듈화하여, 새로운 시스템 추가 시에도 기존 코드 변경 없이 확장 가능하도록 설계했습니다",
        "Circuit Breaker 패턴을 도입하여 외부 시스템 장애 시 해당 시스템만 격리하고 나머지 시스템으로라도 서비스를 지속할 수 있도록 안정성을 확보했습니다",
        "MongoDB 집계 파이프라인으로 상품별 추천 점수를 실시간 계산하고, Redis 다층 캐시 전략으로 인기 검색어와 필터 조건을 미리 계산해서 반복 검색 성능을 극대화했습니다"
      ],
      "technical_details": [
        "사내 검색엔진(Andor)의 스태틱/다이나믹 필드 구조를 활용한 3단계 검색 흐름을 설계했습니다: ①스태틱 필드로 1차 필터링하여 상품코드와 검색키 반환 ②상품별 다이나믹 데이터 주입으로 2차 필터링 ③검색키로 최종 결과 조회",
        "검색 조건을 분석하여 스태틱 필드만으로 검색 가능한 경우 2차 다이나믹 데이터 주입 단계를 생략하는 최적화 로직을 구현했습니다. 이를 위해 '대표출발일' 필드에 2년치 최저가 날짜 정보를 미리 색인했습니다",
        "최대 10,000개 상품에 대한 다이나믹 데이터 주입 시 MongoDB 집계 파이프라인과 외부 시스템 병렬 호출로 처리 시간을 최소화했습니다",
        "Ktor HTTP Client의 비동기 통신으로 동시 검색 요청을 처리하되, 각 외부 시스템별로 독립적인 타임아웃과 재시도 로직을 적용했습니다",
        "도메인별 패키지를 분리(product, cache, search, bridge)하고 계층별 책임을 명확히 분리하여, 테스트 코드 작성과 유지보수가 용이하도록 설계했습니다"
      ],
      "performance_results": [
        "Redis 캐시를 통한 인기 검색어와 필터 조건 사전 계산으로 반복 검색 시 응답시간을 최대 8초에서 1초 이내로 대폭 단축했습니다",
        "'대표출발일' 스태틱 필드 최적화로 다이나믹 조건 없는 검색 시 10,000개 상품도 1초 이내에 결과 반환이 가능해졌습니다",
        "비동기 병렬 처리와 다이나믹 데이터 주입 최적화로 동시 검색 요청 처리 성능을 대폭 향상시켜 트래픽 증가에도 안정적으로 대응할 수 있게 되었습니다",
        "Circuit Breaker 패턴 적용으로 외부 시스템 장애 발생 시에도 서비스 가용성을 99% 이상 유지할 수 있게 되었습니다"
      ]
    },
    "from": "2024.06",
    "to": "2024.11",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": "https://travel.interpark.com/package-search",
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Elasticsearch",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 예약 서비스",
    "images": ["4.png", "5.png"],
    "description": {
      "summary": "여행업계 특성상 여러 판매 채널과 다수의 외부 공급사가 얽힌 복잡한 환경에서 안정적인 예약 처리를 위한 분산 시스템을 구축했습니다. 홈쇼핑, 모두투어 등 다양한 유입채널과 그룹항공, 파트너센터 등 공급사를 통합 관리하며, 복잡한 예약/결제/취소 플로우를 자동화하여 운영 효율성을 크게 향상시켰습니다.",
      "challenges": [
        "여행업계 특성상 홈쇼핑, 모두투어 등 다양한 판매 채널에서 예약이 들어오고, 그룹항공, 파트너센터, 모두투어 등 서로 다른 공급사를 통해 실제 예약이 처리되는 복잡한 구조였습니다. 각 시스템마다 다른 API 규격과 예약 프로세스를 가지고 있어 통합 처리가 어려웠습니다",
        "여행 예약의 복잡성으로 인해 하나의 예약이 항공, 호텔, 투어, 옵션 등 여러 구성요소로 나뉘고, 각각 다른 공급사를 통해 개별적으로 예약되어야 했습니다. 특히 공급사 예약 실패 시 이미 성공한 다른 공급사 예약들을 롤백하는 보상 트랜잭션 처리가 복잡했습니다",
        "예약 상태가 공급사별로 비동기적으로 변경되어 고객에게 정확한 예약 진행 상황을 실시간으로 제공하기 어려웠습니다. 그룹항공의 대기예약, 파트너센터의 승인 대기 등 다양한 상태를 종합적으로 관리해야 했습니다",
        "홈쇼핑의 경우 방송 후 대량 예약 처리가 필요했고, 모두투어의 경우 외부 공급사 상품을 실시간으로 예약해야 하는 등 채널별로 완전히 다른 처리 방식이 필요했습니다"
      ],
      "solutions": [
        "Amazon SQS를 활용한 비동기 메시지 처리로 공급사별 독립적인 예약 처리를 구현했습니다. 각 공급사 예약이 실패해도 다른 공급사에 영향을 주지 않도록 격리하고, Kinesis를 통해 공급사 상태 변경 이벤트를 실시간으로 수신하여 즉시 반영했습니다",
        "Kotlin Coroutines를 활용한 비동기 병렬 처리로 항공, 호텔, 투어 예약을 동시에 진행하되, 실패 시 보상 트랜잭션으로 성공한 예약들을 자동 취소하는 분산 트랜잭션 관리를 구현했습니다. 각 공급사별 재시도 로직을 적용하여 시스템 안정성을 확보했습니다",
        "Redis를 활용한 실시간 상태 캐싱과 MongoDB 집계 파이프라인을 통해 여러 공급사의 예약 상태를 실시간으로 통합하여 고객에게 정확한 진행 상황을 제공했습니다. Slack 알림과 대시보드를 통해 운영팀이 예약 진행 상황을 실시간으로 모니터링할 수 있도록 했습니다",
        "채널별 특성에 맞는 독립적인 예약 처리 로직을 구현했습니다. 홈쇼핑은 엑셀 기반 배치 처리, 모두투어는 REST API 기반 실시간 연동으로 각각 최적화된 처리 방식을 적용했습니다"
      ],
      "technical_details": [
        "MongoDB의 트랜잭션을 활용하여 예약 상태 변경을 안전하게 처리하고, 복잡한 예약 데이터 구조(예약 마스터, 여행자, 항공, 호텔, 투어, 옵션, 결제 등 11개 컬렉션)를 일관성 있게 관리했습니다. 각 컬렉션 간의 참조 무결성을 보장하면서도 높은 조회 성능을 유지했습니다",
        "Amazon SQS의 Visibility Timeout(기본 30초, 처리 시간이 긴 작업은 2분으로 연장)과 MongoDB 기반 자체 구현 Dead Letter Queue를 활용하여 공급사 통신 실패 시 자동 재시도와 실패 처리를 구현했습니다. Kinesis를 통해 그룹항공과 파트너센터의 실시간 예약 상태 변경 이벤트를 수신하여 즉시 반영했습니다",
        "Kotlin Coroutines의 async/await를 활용하여 여러 공급사를 병렬로 호출하되, 각 공급사별로 독립적인 타임아웃과 에러 핸들링을 적용했습니다. 특히 그룹항공의 경우 대기예약 상태에서 실예약으로 전환되는 과정을 별도 워크플로우로 관리했습니다",
        "Redis Cluster를 활용한 분산 락 메커니즘으로 동일 상품에 대한 동시 예약을 제어하고, 예약 재고 관리와 중복 결제 방지를 구현했습니다. TTL을 활용하여 예약 만료 처리를 자동화했습니다",
        "홈쇼핑 엑셀 업로드, 모두투어 API 연동 등 채널별 특성에 맞는 어댑터를 구현했습니다. 각 채널의 데이터 형식을 내부 표준 형식으로 변환하여 일관된 예약 처리 플로우를 유지했습니다",
        "카카오 알림톡 API를 연동하여 예약 진행 상황, 결제 안내, 출발 안내 등을 고객에게 자동으로 발송하고, Slack API를 통해 운영팀에게 예약 오류나 중요 이벤트를 실시간으로 알림했습니다"
      ],
      "performance_results": [
        "MongoDB 집계 파이프라인과 Kotlin Coroutines 병렬 처리로 복잡한 예약 데이터 조회 성능을 대폭 개선했습니다. 11개 컬렉션에서 관련 데이터를 수집하는 통합 조회 API의 응답시간을 1초 이내로 최적화했습니다",
        "SQS와 Kinesis를 활용한 비동기 처리로 공급사 장애가 전체 시스템에 미치는 영향을 최소화했습니다. 특정 공급사 장애 시에도 다른 공급사를 통한 예약 처리는 정상적으로 진행되어 시스템 가용성을 99% 이상 유지했습니다",
        "Redis 캐싱과 분산 락을 통해 동시 예약 처리 성능을 향상시키고 중복 예약을 완전히 방지했습니다. 피크 타임에도 안정적인 예약 처리가 가능해졌습니다",
        "채널별 최적화된 처리 방식으로 홈쇼핑 대량 배치 처리, 모두투어 실시간 연동을 각각 효율적으로 처리할 수 있게 되었습니다"
      ]
    },
    "from": "2023.10",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "AWS Kinesis",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 상품 서비스",
    "images": ["3.png"],
    "description": {
      "summary": "기존 고정 패키지 구성을 유연한 모듈형으로 전환하기 위해 항공, 호텔, 투어를 독립적으로 관리하고 자유롭게 조합할 수 있는 상품 시스템을 구축했습니다. 외부 공급사 연동을 통한 다양한 상품 공급사 확보와 실시간 가격 동기화로 운영 효율성을 크게 향상시켰습니다.",
      "challenges": [
        "기존 시스템은 항공+호텔+투어가 하나로 묶인 고정 패키지 구조로 고객 선택권이 제한되고, 새로운 상품 조합을 위해서는 매번 별도의 상품을 생성해야 하는 운영 비효율성이 있었습니다",
        "외부 공급사(파트너센터, 모두투어)와 자사 시스템 간 상품 정보 구조가 달라 실시간 동기화가 어려웠습니다. 특히 외부에서 상품 정보가 변경되었을 때 이를 감지하고 즉시 반영하는 자동화 시스템이 필요했습니다",
        "동일한 상품에 대해 여러 사용자가 동시에 예약을 시도하거나 관리자가 상품 정보를 수정할 때 데이터 정합성 문제가 발생할 수 있었습니다. 특히 가격 변경과 재고 관리에서 동시성 제어가 중요했습니다",
        "상품의 판매 상태 변경 시 연관된 모든 시스템(검색, 전시, 예약)에 즉시 반영되어야 하는데, 기존에는 수동으로 각 시스템을 업데이트해야 하는 번거로움이 있었습니다",
        "모두투어 같은 외부 공급사의 상품 가격이 실시간으로 변동되는데, 고객이 예약 과정에서 가격 불일치를 경험하는 문제가 있어 신뢰성 있는 가격 관리 시스템이 필요했습니다"
      ],
      "solutions": [
        "모듈형 아키텍처를 도입하여 항공, 호텔, 투어를 독립적인 아이템으로 분리했습니다. 각 아이템은 개별적으로 관리되면서도 자유롭게 조합할 수 있는 구조로 설계하여 다양한 패키지 상품을 유연하게 생성할 수 있도록 했습니다",
        "이벤트 기반 아키텍처를 구축하여 상품 정보 변경 시 관련 시스템들이 자동으로 동기화되도록 했습니다. 상품 수정, 가격 변경, 판매 상태 토글 등의 이벤트를 실시간으로 전파하여 모든 시스템의 데이터 일관성을 보장했습니다",
        "Redis를 활용한 분산 락과 낙관적 락을 조합하여 동시성 문제를 해결했습니다. 같은 상품에 대한 동시 수정을 방지하고, 가격 변경 시 실시간으로 관련 캐시를 갱신하는 시스템을 구현했습니다",
        "외부 공급사별 전용 어댑터를 구현하여 각기 다른 API 규격을 표준화된 내부 모델로 변환했습니다. 파트너센터는 실시간 이벤트 기반으로, 모두투어는 폴링 기반으로 각 공급사 특성에 맞는 동기화 전략을 적용했습니다",
        "실시간 가격 검증 시스템을 구축했습니다. 고객이 예약 과정에서 가격 불일치가 발생하면 백그라운드에서 최신 가격을 조회하여 자동으로 업데이트하고, 변경 사항을 고객에게 투명하게 안내하는 로직을 구현했습니다. 재고는 외부 공급사에서 관리하여 예약 시점에 실시간으로 재고 정보를 확인하고 검증하는 시스템을 구축했습니다"
      ],
      "technical_details": [
        "항공, 호텔, 투어를 독립적인 아이템으로 분리하고 이를 조합하는 아이템그룹 개념을 도입했습니다. 각 아이템은 자체적으로 일자별 가격과 재고를 관리하며, 아이템그룹 레벨에서 패키지 전체의 판매 상태와 정책을 통합 관리합니다",
        "Amazon SQS와 AWS Kinesis를 활용한 이벤트 스트리밍 시스템을 구축했습니다. 상품 변경, 가격 업데이트, 판매 상태 토글 등의 이벤트를 비동기로 처리하여 시스템 간 느슨한 결합을 유지하면서도 실시간 동기화를 보장했습니다",
        "외부 공급사별 특화된 동기화 전략을 구현했습니다. 파트너센터의 경우 Webhook 이벤트를 수신하여 즉시 반영하고, 모두투어는 배치 폴링과 고객 요청 시점의 실시간 검증을 조합한 하이브리드 방식을 적용했습니다",
        "Redis 기반 캐시 전략으로 상품 조회 성능을 최적화했습니다. 상품 정보 변경 시 관련 캐시를 선택적으로 무효화하고 재생성하는 스마트 캐시 갱신 로직을 구현하여 데이터 신선도와 성능을 동시에 확보했습니다",
        "MongoDB의 낙관적 락과 Version 필드를 활용하여 동시 수정 시 데이터 정합성을 보장했습니다. 특히 가격 변경이나 재고 업데이트 시 충돌을 감지하고 최신 데이터로 자동 갱신하는 재시도 메커니즘을 구현했습니다",
        "상품 상태 변경 시 연관된 모든 시스템에 즉시 반영되도록 이벤트 발행 시스템을 구축했습니다. 상품 판매 중단, 가격 변경, 재고 소진 등의 상태 변화를 실시간으로 검색 서비스와 전시 서비스에 전파하여 고객에게 정확한 정보를 제공했습니다",
        "Slack 기반 실시간 알림 시스템을 구축하여 상품 변경사항을 담당자에게 즉시 통지합니다. 상품 생성, 수정, 판매 상태 변경, 가격 업데이트 등 모든 중요 이벤트를 추적하고 관련 담당자에게 자동으로 멘션하는 모니터링 체계를 구현했습니다"
      ],
      "performance_results": [
        "모듈형 아키텍처 도입으로 기존 대비 상품 생성 시간을 대폭 단축했습니다. 항공, 호텔, 투어를 조합하여 새로운 패키지를 만드는 작업이 수 시간에서 수 분으로 줄어들어 운영 효율성이 크게 향상되었습니다",
        "이벤트 기반 자동 동기화로 수동 업데이트 작업을 완전히 제거했습니다. 상품 정보 변경 시 관련된 모든 시스템이 자동으로 동기화되어 운영자의 수작업 부담이 대폭 감소했습니다",
        "Redis 캐시 최적화를 통해 상품 조회 응답 시간을 크게 개선했습니다. 복잡한 상품 조합 정보도 밀리초 단위로 조회할 수 있게 되어 고객 경험이 향상되었습니다",
        "실시간 가격 검증 시스템으로 고객 예약 과정에서의 가격 불일치 문제를 해결했습니다. 외부 공급사 가격 변동 시에도 즉시 반영되어 예약 신뢰성과 고객 만족도가 크게 향상되었습니다",
        "외부 공급사 연동 자동화로 새로운 상품 공급사 확보가 실시간으로 가능해졌습니다. 파트너센터와 모두투어의 신규 상품이 자동으로 시스템에 반영되어 상품 다양성과 경쟁력이 강화되었습니다"
      ]
    },
    "from": "2023.08",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "Kotlin",
      "SpringBoot",
      "MongoDB",
      "Redis",
      "AWS ECS",
      "Amazon SQS",
      "AWS Kinesis",
      "RestAPI",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "패키지 여행 어드민",
    "description": {
      "summary": "기존 분산된 관리 도구들을 하나의 통합 시스템으로 일원화하여 운영자 업무 효율성을 개선했습니다. 직관적인 UI/UX와 실시간 데이터 동기화를 통해 정확한 상품/예약 상태 관리가 가능해지고 확장성 및 유지보수성을 확보했습니다.",
      "highlights": [
        "TypeScript + Next.js/React로 SPA 기반 관리자 인터페이스 구축",
        "마이크로서비스들의 REST API 통합",
        "컴포넌트 기반 재사용 가능한 UI 라이브러리 구축",
        "AWS ECS 환경에서 정적 파일 배포 및 CI/CD 파이프라인 구성",
        "컴포넌트 기반 아키텍처로 확장성 및 유지보수성 확보"
      ]
    },
    "from": "2023.08",
    "to": "2024.05",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "new-package",
    "displayOrder": 999,
    "link": null,
    "linkVisible": false,
    "skills": [
      "TypeScript",
      "Next.js",
      "React",
      "MongoDB",
      "RestAPI",
      "AWS ECS",
      "Terraform",
      "Github Actions",
      "CI/CD",
      "Datadog"
    ]
  },
  {
    "name": "현대카드 PLCC 연동",
    "images": ["6.png"],
    "description": {
      "summary": "현대카드와의 제휴를 통해 PLCC 회원들에게 NOL 포인트 서비스를 제공하기 위한 시스템을 구축했습니다. 사내 정산서비스를 통해 현대카드와 연동하고 가입 상태별 메시지 분기 처리, 포인트 사용 제약 등을 구현했습니다.",
      "highlights": [
        "사내 정산서비스 연동을 통한 포인트 처리 자동화",
        "회원 상태별 자동 적립률 적용 로직 구현",
        "NOL 포인트 적립/사용 프로세스 구축",
        "회원 등급별 차별화된 혜택 관리 시스템",
        "포인트 최대 사용 제약 및 연동 처리"
      ]
    },
    "from": "2023.05",
    "to": "2023.06",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET MVC",
      "RestAPI",
      "MSSQL",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "모두투어 패키지 상품 연동",
    "description": {
      "summary": "외부 공급사인 모두투어와의 상품 연동을 통해 상품 선택권을 다양화하고 운영 효율성을 개선했습니다. 수동 상품 등록에서 자동 연동으로 전환하여 실시간 예약 처리가 가능해지고 고객 편의성 및 만족도를 향상시켰습니다.",
      "highlights": [
        "모두투어 API 실시간 연동으로 상품 정보 자동 동기화",
        "예약 생성/취소 API 자동화로 고객 예약 즉시 처리",
        "Windows Batch 기반 상품 데이터 동기화 스케줄링",
        "상품 정보 매핑 로직으로 내부 표준 데이터 구조 변환",
        "데이터 검증 로직으로 상품 정보 정확성 확보",
        "연동 오류 모니터링 및 알림 시스템 구축"
      ]
    },
    "from": "2023.03",
    "to": "2023.04",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET MVC",
      "RestAPI",
      "MSSQL",
      "Windows Batch",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "패키지 여행 상품 메인 개편",
    "images": ["7.png"],
    "description": {
      "summary": "패키지 여행 메인 페이지의 전시 구조를 개선하여 사용자 탐색 편의성을 높이고 운영 관리 효율성을 증대시켰습니다. 통합된 데이터 구조와 API 아키텍처 개선을 통해 향후 기능 추가 용이성을 확보하고 메인 페이지 성능을 향상시켰습니다.",
      "highlights": [
        "C#/Java SpringBoot 기반 통합 API로 데이터 제공 표준화",
        "상품 전시 레이아웃 최적화로 사용자 탐색 편의성 향상",
        "데이터 정합성 검증 로직으로 상품 정보 신뢰성 확보",
        "API 응답 구조 개선으로 프론트엔드 성능 최적화",
        "메인 페이지 로딩 성능 개선",
        "상품 데이터 캐싱 최적화로 응답 속도 개선"
      ]
    },
    "from": "2023.01",
    "to": "2023.02",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET WebAPI",
      "Java",
      "SpringBoot",
      "RestAPI",
      "Github Actions",
      "CI/CD",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "네이버 패키지 상품 연동",
    "images": ["8.png"],
    "description": {
      "summary": "네이버 해외패키지 플랫폼 입점을 통해 판매 채널을 확대하기 위한 상품 연동 시스템을 구축했습니다. 실시간 상품 정보 동기화를 통해 정확한 데이터를 제공하고 상품 노출 최적화를 구현했습니다.",
      "highlights": [
        "네이버 해외패키지 전용 API 연동 구현",
        "실시간 상품 정보 동기화 시스템",
        "네이버 API 규격에 맞춘 데이터 포맷 변환",
        "상품 노출 최적화로 검색 가시성 향상"
      ]
    },
    "from": "2021.11",
    "to": "2022.01",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "RestAPI",
      "MSSQL",
      "Jenkins",
      "ELK Stack"
    ]
  },
  {
    "name": "구패키지 시스템 운영 및 개선",
    "description": {
      "summary": "대용량 예약/결제 시스템의 안정적 운영을 담당하며 지속적인 개선을 통해 서비스 품질을 향상시켰습니다. 담당자 업무 편의 기능을 지속적으로 개발하고 로그 수집 도구들을 활용하여 시스템 운영 효율성을 높였습니다.",
      "highlights": [
        "대용량 예약/결제 시스템 안정적 운영",
        "담당자 업무 편의 기능 지속적 개발",
        "배치 작업 최적화로 데이터 처리 효율성 향상",
        "시스템 성능 모니터링 및 튜닝",
        "Filebeat, Logstash, Elasticsearch, Kibana 활용"
      ]
    },
    "from": "2021.06",
    "to": "2023.06",
    "type": "company",
    "companyName": "noluniverse",
    "serviceCategory": "old-package",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "ASP.NET",
      "Vue.js",
      "Java",
      "MSSQL",
      "IIS",
      "Kafka",
      "Batch",
      "Stored Procedure",
      "Jenkins",
      "Filebeat",
      "Logstash",
      "Elasticsearch",
      "Kibana"
    ]
  },
  {
    "name": "CMS Mobile",
    "images": ["9.png", "10.png", "11.png", "12.png"],
    "description": {
      "summary": "자동 이체 결과나 고객 상담 내역 등을 모바일로 관리할 수 있는 크로스 플랫폼 모바일 앱을 개발했습니다. Xamarin을 활용한 통합 개발로 개발 효율성과 유지보수성을 확보하고 Firebase 푸시 알림으로 실시간 고객 응대를 지원했습니다.",
      "highlights": [
        "Xamarin 기반 Android/iOS 통합 개발",
        "Firebase 푸시 알림으로 실시간 고객 응대 지원",
        "SQLite 로컬 데이터베이스로 데이터 관리",
        "자동 이체 결과 및 고객 상담 내역 모바일 관리",
        "크로스 플랫폼 개발로 유지보수 비용 절감"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "serviceCategory": "cms-crm",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "Xamarin",
      "Android",
      "iOS",
      "Firebase",
      "SQLite"
    ]
  },
  {
    "name": "AutoCMS (자동 이체 시스템)",
    "images": ["13.png"],
    "description": {
      "summary": "대량 이체 작업의 자동화를 통해 업무 처리 시간을 단축하고 금융기관과의 실시간 연동으로 이체 처리의 정확성과 신뢰성을 확보했습니다. 배치 프로그램 기반 안정적 운영과 체계적인 모니터링을 통해 운영 리소스를 절감했습니다.",
      "highlights": [
        "금융기관 API 실시간 연동으로 정확한 이체 처리",
        "대량 이체 작업 자동화 시스템",
        "Windows 콘솔 기반 배치 프로그램으로 안정적 운영",
        "이체 결과 모니터링으로 처리 상태 실시간 추적",
        "오류 처리 및 재시도 로직으로 처리 신뢰성 확보"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "serviceCategory": "cms-crm",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "Windows Console",
      "MSSQL"
    ]
  },
  {
    "name": "CRM 시스템",
    "description": {
      "summary": "통합 고객 관리를 위한 데스크톱/웹 애플리케이션을 개발했습니다. WPF와 ASP.NET으로 크로스 플랫폼을 지원하고 SignalR 실시간 알림을 통해 고객 응대 신속성을 확보했습니다.",
      "highlights": [
        "WPF 기반 데스크톱과 ASP.NET 웹 플랫폼 통합 개발",
        "SignalR 실시간 알림으로 고객 응대 신속성 확보",
        "DevExpress 컴포넌트 활용한 UI 구현",
        "크로스 플랫폼 지원으로 업무 접근성 향상"
      ]
    },
    "from": "2018.04",
    "to": "2021.02",
    "type": "company",
    "companyName": "ksoft",
    "serviceCategory": "cms-crm",
    "link": null,
    "linkVisible": false,
    "skills": [
      "C#",
      "WPF",
      "DevExpress",
      "ASP.NET",
      "SignalR",
      "MSSQL"
    ]
  }
]